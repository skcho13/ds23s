[
  {
    "objectID": "contents/eda.html",
    "href": "contents/eda.html",
    "title": "Exploratory data analysis",
    "section": "",
    "text": "source: R for Data Science\n\nTransform (데이터 변형)\n\n데이터의 변수들 중 일부를 선택하기\n필요한 부분를 필터링하기\n기존의 변수들로 새로운 변수 만들기\n요약자료를 계산하기\n\nVisualise (시각화)\n\n시각화를 통해 데이터가 품고 있는 정보를 파악하여 데이터에 대한 이해를 높임\n\nModel (모형)\n\n시각화와 데이터 변형의 두 가지를 병행하면서 호기심과 의구심을 갖고 연구자가 자신의 관심사에 답을 구하는 탐색적 분석을 하는 과정\n이 과정에서 모형을 세우고 데이터를 얼마나 잘 설명하는지를 살펴보고, 모형을 수정해 나가는 과정을 거침"
  },
  {
    "objectID": "contents/eda.html#first-steps",
    "href": "contents/eda.html#first-steps",
    "title": "Exploratory data analysis",
    "section": "First steps",
    "text": "First steps\n\n\nLoad packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\nData: Fuel economy data from 1999 to 2008 for 38 popular models of cars\n\n\n# import the dataset\nmpg_data = sm.datasets.get_rdataset(\"mpg\", \"ggplot2\")\nmpg = mpg_data.data\n\n\n# Description\nprint(mpg_data.__doc__)\n\n\nmpg\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      auto(s6)\n      f\n      19\n      28\n      p\n      midsize\n    \n    \n      230\n      volkswagen\n      passat\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      21\n      29\n      p\n      midsize\n    \n    \n      231\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      midsize\n    \n    \n      232\n      volkswagen\n      passat\n      2.8\n      1999\n      6\n      manual(m5)\n      f\n      18\n      26\n      p\n      midsize\n    \n    \n      233\n      volkswagen\n      passat\n      3.6\n      2008\n      6\n      auto(s6)\n      f\n      17\n      26\n      p\n      midsize\n    \n  \n\n234 rows × 11 columns\n\n\n\nQ: 엔진의 크기(displ)와 연비(hwy)는 어떤 관계에 있는가?\n\n# Scatter plot: 산포도\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\") # empty plot을 생성하고, x, y축에 mapping할 mpg 데이터의 변수를 지정\n    .add(so.Dot()) # layer를 추가하여, points들을 Dot이라는 mark object를 써서 표현\n)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLayer-specific mappings\n다음과 같이 첫번째 layer 안에서 x, y를 mapping하는 경우, 이후 새로 추가되는 layer에는 그 mapping이 적용되지 않음\n(\n    so.Plot(mpg)\n    .add(so.Dot(), x=\"displ\", y=\"hwy\") # 이 layer에서만 mapping이 유효\n)\n\n\n\n\n\n\n\n\nTip\n\n\n\n다음과 같이 x, y를 생략하거나 간략히 할 수 있으나…\nso.Plot(mpg, \"displ\", \"hwy\").add(so.Dot())\n\n\n\n카테고리 변수인 경우\n\ncyl (실린더 개수), hwy (고속도로 연비)의 관계를 scatterplot으로 살펴볼 수 있는가? (left)\nclass (차량 타입), drv (전륜 구동, 후륜 구동, 4륜 구동 타입)의 관계는 어떠한가? (right)"
  },
  {
    "objectID": "contents/eda.html#aesthetic-mappings",
    "href": "contents/eda.html#aesthetic-mappings",
    "title": "Exploratory data analysis",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\nQ: 엔진의 크기와 연비와의 관계에서 보이는 트렌드 라인에서 심하게 벗어난 것이 있는가?\n\n\n\n\n\n 변수들을 x, y라는 position에 mapping하는 것에 추가하여 다음과 같은 속성(aesthetic)에 mapping할 수 있음\n색(color), 크기(pointsize), 모양(marker), 선 종류(linestyle), 투명도(alpha)\n\n\nColor\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nPointsize\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", pointsize=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nMarker\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", marker=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nAlpha\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", alpha=\"class\")\n    .add(so.Dot())\n)\n\n\n\n\n\n\nLinestyle\n\nhealthexp = sns.load_dataset(\"healthexp\")\n\np = so.Plot(healthexp, x=\"Spending_USD\", y=\"Life_Expectancy\", linestyle=\"Country\")\np.add(so.Line())\n\n\n\n\n\n\n두 가지 이상의 속성\nex. color & marker\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\", marker=\"drv\")\n    .add(so.Dot())\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\", pointsize=\"drv\")\n    .add(so.Dot())\n    .scale(pointsize=(5, 15)) # pointsize의 range설정\n)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n어떤 속성을 어떤 변수에 할당하는 것이 적절한지를 선택하는 것이 기술\n예를 들어, 아래 두 플랏은 동일한 정보를 품고 있으나, 시각적 인식에 큰 차이를 만듦\n\n\n\n\n\n\n\n\n\n\n\n\n연속 vs. 카테고리 변수 여부에 따라 다르게 작동\n\nleft = so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\").add(so.Dot()).layout(engine=\"constrained\")\n\nright = so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"cty\").add(so.Dot()).layout(engine=\"constrained\")\n\n\n\n\n\n\n\n\n(a) type of car\n\n\n\n\n\n\n\n(b) city miles per gallon\n\n\n\n\nFigure 1: Categorical vs. Continuous\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"cty\")\n    .add(so.Dot())\n    .scale(color=so.Continuous(\"crest\", norm=(0, 50), trans=\"sqrt\"))\n)"
  },
  {
    "objectID": "contents/eda.html#setting-properties",
    "href": "contents/eda.html#setting-properties",
    "title": "Exploratory data analysis",
    "section": "Setting properties",
    "text": "Setting properties\nSetting properties vs. mapping properties (aesthetic)\n변수에 속성을 할당하는 것이 아니라, graphical objects (Marks)의 속성을 지정\nMarks (.Dot(), .Line(), .Bar(), …)마다 설정할 수 있는 속성이 다름\n주로 쓰이는 속성들: color, pointsize, alpha\n\n.Dot()의 경우\nclass seaborn.objects.Dot(artist_kws=, marker=<‘o’>, pointsize=<6>, stroke=<0.75>, color=<‘C0’>, alpha=<1>, fill=, edgecolor=, edgealpha=, edgewidth=<0.5>, edgestyle=<‘-’>)\n.Dots()의 경우\nclass seaborn.objects.Dots(artist_kws=, marker=<rc:scatter.marker>, pointsize=<4>, stroke=<0.75>, color=<‘C0’>, alpha=<1>, fill=, fillcolor=, fillalpha=<0.2>)\nseaborn reference\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"deepskyblue\")) # Mark object 안에 지정!\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"deepskyblue\", pointsize=12, edgecolor=\"white\", edgewidth=1)) # Mark object 안에 지정!\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"orange\", pointsize=12, marker=\">\", alpha=.4)) # Mark object 안에 지정!\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n다양한 Mark properties에 대해서는 홈페이지 참고\nProperties of Mark objects"
  },
  {
    "objectID": "contents/eda.html#faceting",
    "href": "contents/eda.html#faceting",
    "title": "Exploratory data analysis",
    "section": "Faceting",
    "text": "Faceting\n카테고리 변수들이 지니는 카테고리들(레벨)로 나누어 그리기\nData: palmerpenguins\n\n\n\n Artwork by @allison_horst\n\n\n\n\n\n\n\npenguins = sns.load_dataset(\"penguins\") # load a dataset: penguins\npenguins.head()\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.1\n      18.7\n      181.0\n      3750.0\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.5\n      17.4\n      186.0\n      3800.0\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.3\n      18.0\n      195.0\n      3250.0\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.7\n      19.3\n      193.0\n      3450.0\n      Female\n    \n  \n\n\n\n\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(\"sex\") # 기본적으로 columns으로 나누어져 그림\n    .add(so.Dot(alpha=.5))\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(col=\"species\", row=\"sex\")\n    .add(so.Dot(alpha=.5))\n)\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFacet과 Color 중 어떤 방식으로 표현하는 것이 유리한가? 밸런스를 잘 선택!\n\n\n\nleft = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .facet(col=\"species\")\n    .add(so.Dot(alpha=.5))\n)\nright = (\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\", color=\"species\")\n    .add(so.Dot(alpha=.5))\n)\n\n\n\n\n\n\n\n\n(a) faceting\n\n\n\n\n\n\n\n(b) color mapping\n\n\n\n\nFigure 2: faceting vs. color mapping\n\n\n\nPairing\nFaceting이 변수 내에 다른 레벨에 따라 그려지는데 반해,\nparing은 x, y축에 다른 변수를 지정하여 그림\n\n(\n    so.Plot(penguins, y=\"body_mass_g\", color=\"species\") # y축은 공유\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"]) # x축에 다른 변수를 mapping\n    .add(so.Dots()) # .Dots()! overploting에 유리. .Dot(alpha=.)로도 비슷\n)\n\n\n\n\nFacet & pair 동시\n\n(\n    so.Plot(penguins, y=\"body_mass_g\", color=\"sex\")\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"])\n    .facet(row=\"species\")\n    .add(so.Dots())\n)\n\n\n\n\n\n\nMultiple plots\n개발 중…? Matplotlib을 이용\n\nimport matplotlib as mpl\n\nf = mpl.figure.Figure(figsize=(8, 4))\nsf1, sf2 = f.subfigures(1, 2)\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"flipper_length_mm\")\n    .add(so.Dots())\n    .on(sf1)\n    .plot()\n)\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"flipper_length_mm\")\n    .facet(row=\"sex\")\n    .add(so.Dots())\n    .on(sf2)\n    .plot()\n)\n\n\n\n\nSave plots\np.save(\"data/filename.png\") # p: a plot oject"
  },
  {
    "objectID": "contents/eda.html#geometric-objects",
    "href": "contents/eda.html#geometric-objects",
    "title": "Exploratory data analysis",
    "section": "Geometric objects",
    "text": "Geometric objects\n\nDot marks: Dot, Dots\nLine marks: Line, Lines, Path, Paths, Dash, Range\nBar marks: Bar, Bars\nFill marks: Area, Band\nText marks: Text"
  },
  {
    "objectID": "contents/eda.html#layer-specific-mappings",
    "href": "contents/eda.html#layer-specific-mappings",
    "title": "Exploratory data analysis",
    "section": "Layer-specific mappings",
    "text": "Layer-specific mappings\n\npenguins = sns.load_dataset(\"penguins\")\n\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"species\", color=\"island\")\n    .facet(col=\"sex\")\n    .add(so.Dot(), so.Jitter(.5))\n    .share(x=False)\n    .limit(y=(2.5, -.5))\n    .label(\n        x=\"Body mass (g)\", y=\"\",\n        color=str.capitalize,\n        title=\"{} penguins\".format,\n    )\n)\n\n\n\n\n\nhealthexp = sns.load_dataset(\"healthexp\")\n\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Spending_USD\", color=\"Country\")\n    .add(so.Lines())\n)\n\n\n\n\n\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Spending_USD\", color=\"Country\")\n    .add(so.Lines(), so.Norm(where=\"x == x.min()\", percent=True))\n    .label(y=\"Percent change in spending from 1970 baseline\")\n)\n\n\n\n\n\nhealthexp.tail(6).sort_values(\"Spending_USD\")\n\n\n\n\n\n  \n    \n      \n      Year\n      Country\n      Spending_USD\n      Life_Expectancy\n    \n  \n  \n    \n      272\n      2020\n      Japan\n      4665.641\n      84.7\n    \n    \n      271\n      2020\n      Great Britain\n      5018.700\n      80.4\n    \n    \n      270\n      2020\n      France\n      5468.418\n      82.3\n    \n    \n      268\n      2020\n      Canada\n      5828.324\n      81.7\n    \n    \n      269\n      2020\n      Germany\n      6938.983\n      81.1\n    \n    \n      273\n      2020\n      USA\n      11859.179\n      77.0"
  },
  {
    "objectID": "contents/resources.html",
    "href": "contents/resources.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "refer to here\nfigure reference"
  },
  {
    "objectID": "contents/resources.html#cross-reference",
    "href": "contents/resources.html#cross-reference",
    "title": "NumPy and pandas",
    "section": "Cross-reference",
    "text": "Cross-reference\ncrossref is Table 1 and Table 2"
  },
  {
    "objectID": "contents/customizing.html",
    "href": "contents/customizing.html",
    "title": "Customizing plots",
    "section": "",
    "text": "Load packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\n\nCustomizing\nCustomizing limits, labels, and titles Plot has a number of methods for simple customization, including Plot.label(), Plot.limit(), and Plot.share():\n\ndiamonds = sns.load_dataset(\"diamonds\")\n\n(\n    so.Plot(diamonds, x=\"carat\", y=\"price\", color=\"carat\", marker=\"cut\")\n    .add(so.Dots())\n    .scale(\n        color=so.Continuous(\"crest\", norm=(0, 3), trans=\"sqrt\"),\n    )\n)"
  },
  {
    "objectID": "contents/inspection.html",
    "href": "contents/inspection.html",
    "title": "Inspecting data",
    "section": "",
    "text": ".head(), .describe(), .info(), .value_counts(), .sort_values() .nlargest()"
  },
  {
    "objectID": "contents/seaborn.html",
    "href": "contents/seaborn.html",
    "title": "The seaborn.objects interface",
    "section": "",
    "text": "The seaborn.objects interface\nThe grammer of graphics의 데이터 시각화 이론을 잘 반영하고 있으며 아직 발전 중\n기존 seaborn modules을 완전히 대체하지는 못하므로 필요시 병행하여 사용\n\nv0.12.0 (September 2022)\nIntroduction of the objects interface\nThis release debuts the seaborn.objects interface, an entirely new approach to making plots with seaborn. It is the product of several years of design and 16 months of implementation work. The interface aims to provide a more declarative, composable, and extensible API for making statistical graphics. It is inspired by Wilkinson’s grammar of graphics, offering a Pythonic API that is informed by the design of libraries such as ggplot2 and vega-lite along with lessons from the past 10 years of seaborn’s development.\n\n\n\n\n\n\n\nNote\n\n\n\nThe objects interface is currently experimental and incomplete. It is stable enough for serious use, but there certainly are some rough edges and missing features.\n\n\n\nThe seaborn.objects interface tutorial\nAPI reference link"
  },
  {
    "objectID": "contents/setup.html",
    "href": "contents/setup.html",
    "title": "환경설정",
    "section": "",
    "text": "Conda Cheatsheet: 기본적인 conda 명령어 요약\n\n\nAnaconda보다는 기본 패키지들이 미리 설치되지 않는 miniconda를 추천: miniconda install page\n\nWindows 경우: 설치시 물어보는 “add Miniconda to your PATH variable” 옵션을 켜고 설치할 것\n\nShell 사용에 대해서는 아래 3. Command Line Tool 참고\n\n# Terminal (Mac) or Miniconda Powershell Prompt (Windows)\n\n#> conda info # 콘다 정보 \n#> conda update conda # 콘다 업데이트\n\n\n\n\nconda managing channels\n다음을 통해 .condarc 환경파일에 configuration 추가\n\n#> conda config --add channels conda-forge\n#> conda config --set channel_priority strict  # 다른 채널 검색 안함\n\nPython update\n\n#> conda install python=3.10  # python update\n\n\n\n\nuser guide\n환경 생성: miniconda에서 자체 제공하는 가상환경으로 다른 가상환경 툴인 pyenv나 venv 사용하지 않음\n\n#$ conda create --name myenv\n\n# 특정 버전의 파이썬 설치시\n#$ conda create --name myenv python=3.9\n\n환경 확인\n\n#$ conda env list\n\n#> conda environments:\n#>  base         */.../miniconda3\n#>                /.../miniconda3/envs/myenv\n\n환경 제거\n\n#> conda env remove --name myenv\n\n환경 activate/deactivate\n\n#> conda activate myenv\n#> conda deactivate  # activated 환경 내에서\n\n\n\n\n\n# 특정 환경을 activate한 후\n#> conda install <package name1> <package name2> ...\n#> conda install --channel conda-forge <package name> # 특정 conda-forge 채널을 통한 설치\n\n# 제거\n#> conda remove <package name1> <package name2> ...\n\n# update\n#> conda update <package name1> <package name2> ...\n#> conda update --all # all packages\n\n# 패키지 리스트\n#> conda list\n\n\n# pip을  이용한  패키지 설치: conda repository에 없는 패키지들을 설치하는 경우. 충돌의 우려 있음\n#> pip install <package name1> <package name2> ...\n\n\n# 수업에 필요한 기본 패키지 설치\n#> conda install jupyter jupyterlab numpy pandas matplotlib seaborn\n#> conda install -c plotly plotly=5.13.0"
  },
  {
    "objectID": "contents/setup.html#vs-code-설치",
    "href": "contents/setup.html#vs-code-설치",
    "title": "환경설정",
    "section": "VS Code 설치",
    "text": "VS Code 설치\n개인마다 선호하는 text editor가 있으나 본 수업에서는 VS Code로 진행: download and install here"
  },
  {
    "objectID": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "href": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "title": "환경설정",
    "section": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천",
    "text": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천\nOh-My-Zsh!: 링크\n\n이 경우 miniconda 설치시 bash의 추가된 conda setup을 zsh로 가져와야 함: minconda를 zsh 설치 후에 설치하는 경우는 miniconda가 추가시키니 신경쓸 필요 없음\n\nhome directory에 있는 .bash_profile 을 열면 # >>> conda initialize >>> 로 시작해서 # <<< conda initialize <<< 부분까지를 복사한 후 .zshrc 파일을 열어 맨 뒤에 붙여넣음\n위 파일을 VS Code에서 쉽게 열어보려면 아래 그림처럼 VS Code에서 Sehll Command: Install 'Code' command in PATH 실행하고 나면\nshell 환경에서 code .zshrc를 실행하면 VS Code에서 편집할 수 있음"
  },
  {
    "objectID": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "href": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "title": "환경설정",
    "section": "Windows의 경우: Windows Terminal 추천",
    "text": "Windows의 경우: Windows Terminal 추천\n\n설치 링크는 구글링…\n명령프롬프트(CMD) vs. Powershell\nPowershell에서 conda를 사용하기 위해서는 몇 가지 설정 필요: 블로그 링크"
  },
  {
    "objectID": "contents/setup.html#extensions",
    "href": "contents/setup.html#extensions",
    "title": "환경설정",
    "section": "Extensions",
    "text": "Extensions\n\nPython\nDocs View\nPython Environment Manager"
  },
  {
    "objectID": "contents/setup.html#preferences",
    "href": "contents/setup.html#preferences",
    "title": "환경설정",
    "section": "Preferences",
    "text": "Preferences\n\nthemes\nfont, font size (notebook, results)\n\nundo: cell 안과 밖\nvariables viewer, data viewer"
  },
  {
    "objectID": "contents/temp.html",
    "href": "contents/temp.html",
    "title": "Temp",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\n# import statsmodels.api as sm\n\n\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\")\n\ndf1 = penguins.describe(include=\"object\")\ndf2 = tips.describe(include=\"category\")\n\ndf1\ndf2\n\n\n\n\n\n\nTable 1:  Planets1 \n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show(renderer=\"notebook\")\n\n\n                                                \n\n\n\ngapminder2007\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      11\n      Afghanistan\n      Asia\n      2007\n      43.828\n      31889923\n      974.580338\n      AFG\n      4\n    \n    \n      23\n      Albania\n      Europe\n      2007\n      76.423\n      3600523\n      5937.029526\n      ALB\n      8\n    \n    \n      35\n      Algeria\n      Africa\n      2007\n      72.301\n      33333216\n      6223.367465\n      DZA\n      12\n    \n    \n      47\n      Angola\n      Africa\n      2007\n      42.731\n      12420476\n      4797.231267\n      AGO\n      24\n    \n    \n      59\n      Argentina\n      Americas\n      2007\n      75.320\n      40301927\n      12779.379640\n      ARG\n      32\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1655\n      Vietnam\n      Asia\n      2007\n      74.249\n      85262356\n      2441.576404\n      VNM\n      704\n    \n    \n      1667\n      West Bank and Gaza\n      Asia\n      2007\n      73.422\n      4018332\n      3025.349798\n      PSE\n      275\n    \n    \n      1679\n      Yemen, Rep.\n      Asia\n      2007\n      62.698\n      22211743\n      2280.769906\n      YEM\n      887\n    \n    \n      1691\n      Zambia\n      Africa\n      2007\n      42.384\n      11746035\n      1271.211593\n      ZMB\n      894\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n      ZWE\n      716\n    \n  \n\n142 rows × 8 columns\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n                                                \n(a) Gapminder: 1957\n\n\n\n\n\n                                                \n(b) Gapminder: 2007\n\n\n\nFigure 1: Life Expectancy and GDP\n\n\n\n\nwdi = pd.read_csv(\"data/WDIData.csv\")\n\n\nwdi_small = wdi.iloc[:, :7]\nwdi_small = wdi_small.sample(10000)\nwdi_small[\"Indicator Name\"].value_counts()\n\nDepth of credit information index (0=low to 8=high)                                 16\nAdults (ages 15+) and children (ages 0-14) newly infected with HIV                  16\nNet financial flows, multilateral (NFL, current US$)                                15\nHouseholds and NPISHs final consumption expenditure: linked series (current LCU)    14\nEmployers, female (% of female employment) (modeled ILO estimate)                   14\n                                                                                    ..\nHouseholds and NPISHs Final consumption expenditure (current LCU)                    1\nTariff rate, most favored nation, simple mean, primary products (%)                  1\nCapture fisheries production (metric tons)                                           1\nPrevalence of undernourishment (% of population)                                     1\nNet bilateral aid flows from DAC donors, Norway (current US$)                        1\nName: Indicator Name, Length: 1437, dtype: int64"
  },
  {
    "objectID": "contents/vis.html",
    "href": "contents/vis.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Python의 시각화 라이브러리는 다양하게 개발되어지고 있으며, 각기 특성이 달라 하나로만 쓰기 어려운 상황임\nR의 ggplot2라는 매우 강력한 시각화 도구와 비교하면 이에 상응할 만한 Python 시각화 도구는 찾기 어려움\n\n\n\nMatplotlib\n가장 오래된 Python과 잘 통합된 널리 사용되는 라이브러리\n거의 가능한 모든 플랏을 그릴 수 있음\n한편, 디테일한 부분을 모두 specify해야 함으로써 많은 코딩이 요구되며, interactive 또는 web graphs에 취약함\npandas\nMatplotlib로 구현된 DataFrame의 method로 간략하게 시각화가 가능하며, 빠르게 데이터를 들여다볼 수 있음\nSeaborn & the seaborn.objects interface\nMatplotlib 위에 개발된 간결한 문법의 high-level 언어\nDecalative: 변수들이 어떤 시각화 속성과 위치를 지니는지만 specify\n“Grammer of graphics”라는 시각화 문법에 충실하고자 the seaborn.objects로 새롭게 변화 중\n\n\n\nAltair\n“Grammer of graphics”를 충실히 따라 설계됨\n각 plot이 이미지가 아닌 data + specification으로 이루어짐: 이미지가 저장되지 않고, 브라우저에서 이미지로 complie되어 생성됨\nWeb-based interactive 시각화인 D3에 그 모체를 두며, Vega/Vega-Lite로부터 파생됨\njavascript-based로 interactive 시각화에 용이하나 Python과 연계가 부족한 부분이 있고, 개발이 더딘 듯\nBokeh\nPlotly\n다양한 언어(R, Python, Julia)을 지원하며, 기업 수준의 상용화 제품들도 있으며, 지원군 많음\n\n\nJake VanderPlas의 2017년 발표 자료 중: The Python Visualization Landscape\n\nSource: Jake VanderPlas - The Python Visualization Landscape PyCon 2017"
  },
  {
    "objectID": "contents/vis.html#bertins-semiology-of-graphics-1967",
    "href": "contents/vis.html#bertins-semiology-of-graphics-1967",
    "title": "Data Visualization",
    "section": "Bertin’s Semiology of Graphics (1967)",
    "text": "Bertin’s Semiology of Graphics (1967)"
  },
  {
    "objectID": "contents/vis.html#the-grammer-of-graphics",
    "href": "contents/vis.html#the-grammer-of-graphics",
    "title": "Data Visualization",
    "section": "The Grammer of Graphics",
    "text": "The Grammer of Graphics\na coherent system for describing and building graphs\nFundamentals of Data Visualization by Claus O. Wilke\nAesthetics and types of data\n\n같은 정보를 품고 있으나 더 적절한 representation이 존재…"
  },
  {
    "objectID": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "href": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "title": "Data Visualization",
    "section": "탐색적 (Exploratory) vs. 정보전달 (Communicative)",
    "text": "탐색적 (Exploratory) vs. 정보전달 (Communicative)"
  },
  {
    "objectID": "contents/vis.html#interative-plots",
    "href": "contents/vis.html#interative-plots",
    "title": "Data Visualization",
    "section": "Interative Plots",
    "text": "Interative Plots\nAltair\n\n\n\n\n\n\n\nPlotly"
  },
  {
    "objectID": "contents/pandas.html",
    "href": "contents/pandas.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "Load Packages\n# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm"
  },
  {
    "objectID": "contents/pandas.html#numpy",
    "href": "contents/pandas.html#numpy",
    "title": "NumPy and pandas",
    "section": "NumPy",
    "text": "NumPy\n\n수학적 symbolic 연산에 대한 구현이라고 볼 수 있으며,\n행렬(matrix) 또는 벡터(vector)를 ndarrays (n-dimensional arrays)이라는 이름으로 구현함.\n\n사실상 정수(int)나 실수(float)의 한가지 타입으로 이루어짐.\n고차원의 arrays 가능\n\nSource: Medium.com\n\n\n가령, 다음과 같은 행렬 연산이 있다면,\n\\(\\begin{bmatrix}1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{bmatrix} \\begin{bmatrix}2 \\\\ -1 \\end{bmatrix} = \\begin{bmatrix}0 \\\\ 2 \\\\ 4 \\end{bmatrix}\\)\n\n\nA = np.array([[1, 2],\n              [3, 4],\n              [5, 6]])\nX = np.array([[2],\n              [-1]])\n\nA.dot(X)  # A * X : matrix multiplication\n\narray([[0],\n       [2],\n       [4]])\n\n\n\nprint(np.array([0, 2, 4])) # 1-dim matrix: vector\nprint(np.array([0, 2, 4]).reshape(3, 1)) # 3x1 matrix\n\n[0 2 4]\n[[0]\n [2]\n [4]]\n\n\n\ns3 = np.array([0, 2, 4])\ns3.reshape(3,-1).T\n\narray([[0, 2, 4]])\n\n\n\nX2 = np.array([2, -1])\nA.dot(X2)\n\narray([0, 2, 4])\n\n\n\nprint(A.shape)\nprint(A.ndim)\nprint(A.dtype)\n\n(3, 2)\n2\nint64\n\n\n\nA + A # element-wise addition\n\narray([[ 2,  4],\n       [ 6,  8],\n       [10, 12]])\n\n\n\n2 * A - 1 # recycling rule\n\narray([[ 1,  3],\n       [ 5,  7],\n       [ 9, 11]])\n\n\n\nnp.exp(A) # element-wise\n\narray([[  2.72,   7.39],\n       [ 20.09,  54.6 ],\n       [148.41, 403.43]])\n\n\n\nPython vs. NumPy 계산\n\n2**31 + 1\n\n2147483649\n\n\n\na = np.array([2**31-1], dtype='int32')\na + 1\n\narray([-2147483648], dtype=int32)"
  },
  {
    "objectID": "contents/pandas.html#pandas-series-dataframe",
    "href": "contents/pandas.html#pandas-series-dataframe",
    "title": "NumPy and pandas",
    "section": "pandas : Series & DataFrame",
    "text": "pandas : Series & DataFrame\n\nSeries\n1개의 칼럼으로 이루어진 데이터 포멧 - DataFrame의 각 칼럼들을 Series로 이해할 수 있음\n\nSource: Practical Data Science\n\n\nDataFrame\n각 칼럼들이 한 가지 데이터 타입으로 이루어진 tabular형태 (2차원)의 데이터 포맷\n\n각 칼럼은 기본적으로 한 가지 데이터 타입인 것이 이상적이나, 다른 타입이 섞여 있을 수 있음\nNumPy의 2차원 array의 각 칼럼에 labels을 부여한 것으로 볼 수도 있으나, 여러 다른 기능들이 추가됨\nNumPy의 경우 고차원의 array를 다룰 수 있음: ndarray\n\n고차원의 DataFrame과 비슷한 것은 xarray가 존재\n\n\n\nSource: Practical Data Science\n\n\n\nndarray로부터 DataFrame을 생성\n\ndf = pd.DataFrame(A, columns=[\"A1\", \"A2\"])\ndf\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n      A2\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n    \n    \n      2\n      5\n      6\n    \n  \n\n\n\n\n\n\n\ndf.values # 또는 df.to_numpy()\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\n\nDataFrame의 칼럼: Series로 추출\n\ns = df[\"A1\"] # A1 칼럼 선택\ns\n# DataFrame의 column 이름이 Series의 name으로 전환\n\n0    1\n1    3\n2    5\nName: A1, dtype: int64\n\n\n\ntype(s)\n\npandas.core.series.Series\n\n\n\n1개의 칼럼만을 가진 DataFrame도 가능\n\ns2 = df[[\"A1\"]] # A1 칼럼 선택\ns2\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n    \n  \n  \n    \n      0\n      1\n    \n    \n      1\n      3\n    \n    \n      2\n      5\n    \n  \n\n\n\n\n\n\n\ntype(s2)\n\npandas.core.frame.DataFrame\n\n\n\n\n\n(참고) Mixed Data Type\n\ns = pd.Series([1, 2, \"3\"])\n\n\ns.dtype\n\ndtype('O')\n\n\n\ns + s\n\n0     2\n1     4\n2    33\ndtype: object\n\n\n\ns_int = s.astype(\"int\")\ns_int + s_int\n\n0    2\n1    4\n2    6\ndtype: int64\n\n\n\ns2 = pd.Series([1, 2, 3.1])\ns2.dtype\n\ndtype('float64')\n\n\n\ns2.astype(\"int\")\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\n\n\n\nLoading a Dataset: Tips\n\ntips = sns.load_dataset(\"tips\")\ntips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n    \n  \n\n244 rows × 7 columns\n\n\n\n\n# \ntips.values\n\narray([[16.99, 1.01, 'Female', ..., 'Sun', 'Dinner', 2],\n       [10.34, 1.66, 'Male', ..., 'Sun', 'Dinner', 3],\n       [21.01, 3.5, 'Male', ..., 'Sun', 'Dinner', 3],\n       ...,\n       [22.67, 2.0, 'Male', ..., 'Sat', 'Dinner', 2],\n       [17.82, 1.75, 'Male', ..., 'Sat', 'Dinner', 2],\n       [18.78, 3.0, 'Female', ..., 'Thur', 'Dinner', 2]], dtype=object)\n\n\n\ntips.head() # 처음 N개 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\ntips.describe() # numerical type만 나열\n\n\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244.00\n    \n    \n      mean\n      19.79\n      3.00\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      6.00\n    \n  \n\n\n\n\n\n\n\ntips.describe(include=\"all\") # all types 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244\n      244\n      244\n      244\n      244.00\n    \n    \n      unique\n      NaN\n      NaN\n      2\n      2\n      4\n      2\n      NaN\n    \n    \n      top\n      NaN\n      NaN\n      Male\n      No\n      Sat\n      Dinner\n      NaN\n    \n    \n      freq\n      NaN\n      NaN\n      157\n      151\n      87\n      176\n      NaN\n    \n    \n      mean\n      19.79\n      3.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      NaN\n      NaN\n      NaN\n      NaN\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      NaN\n      NaN\n      NaN\n      NaN\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      NaN\n      NaN\n      NaN\n      NaN\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      NaN\n      NaN\n      NaN\n      NaN\n      6.00\n    \n  \n\n\n\n\n\ntips.describe(include=\"category\")\n\n\n\n\n\n\n\n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\ns1 = tips[\"day\"].value_counts() # \"day\" 칼럼을 선택 후 각 카테고리별 counts\ns2 = tips[\"day\"].value_counts(normalize=True) # 카테고리별 비율\n\ns3 = tips[[\"sex\", \"smoker\"]].value_counts() # \"sex\", \"smoker\" 칼럼을 선택 후 유니크한 카테고리별 counts\n\n\ndisplay(s1); display(s2)\ndisplay(s3)\n\n\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n\n\nSat    0.36\nSun    0.31\nThur   0.25\nFri    0.08\nName: day, dtype: float64\n\n\n\n\nsex     smoker\nMale    No        97\n        Yes       60\nFemale  No        54\n        Yes       33\ndtype: int64\n\n\n\n\n\n\n\nLoading a Dataset: Penguins\n\npenguins = sns.load_dataset(\"penguins\")\npenguins\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.10\n      18.70\n      181.00\n      3750.00\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.50\n      17.40\n      186.00\n      3800.00\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.30\n      18.00\n      195.00\n      3250.00\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.70\n      19.30\n      193.00\n      3450.00\n      Female\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      339\n      Gentoo\n      Biscoe\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      340\n      Gentoo\n      Biscoe\n      46.80\n      14.30\n      215.00\n      4850.00\n      Female\n    \n    \n      341\n      Gentoo\n      Biscoe\n      50.40\n      15.70\n      222.00\n      5750.00\n      Male\n    \n    \n      342\n      Gentoo\n      Biscoe\n      45.20\n      14.80\n      212.00\n      5200.00\n      Female\n    \n    \n      343\n      Gentoo\n      Biscoe\n      49.90\n      16.10\n      213.00\n      5400.00\n      Male\n    \n  \n\n344 rows × 7 columns\n\n\n\n\npenguins.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\n\npenguins.describe(include=\"object\")\n\n\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      sex\n    \n  \n  \n    \n      count\n      344\n      344\n      333\n    \n    \n      unique\n      3\n      3\n      2\n    \n    \n      top\n      Adelie\n      Biscoe\n      Male\n    \n    \n      freq\n      152\n      168\n      168\n    \n  \n\n\n\n\n\n\n\npenguins[[\"island\", \"species\"]].value_counts()\n\nisland     species  \nBiscoe     Gentoo       124\nDream      Chinstrap     68\n           Adelie        56\nTorgersen  Adelie        52\nBiscoe     Adelie        44\ndtype: int64\n\n\n\ns1 = tips[\"total_bill\"]\ns2 = tips[\"tip\"]\n\npd.DataFrame([s1, s2]).T.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n    \n    \n      1\n      10.34\n      1.66\n    \n    \n      2\n      21.01\n      3.50\n    \n    \n      3\n      23.68\n      3.31\n    \n    \n      4\n      24.59\n      3.61\n    \n  \n\n\n\n\n\n\npandas Index\n\nframe1 = pd.DataFrame(np.arange(6).reshape((2, 3)),\n                     index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),\n                     columns=pd.Index([\"one\", \"two\", \"three\"], name=\"number\"))\nframe1\n\n\n\n\n\n\n\n  \n    \n      number\n      one\n      two\n      three\n    \n    \n      state\n      \n      \n      \n    \n  \n  \n    \n      Ohio\n      0\n      1\n      2\n    \n    \n      Colorado\n      3\n      4\n      5\n    \n  \n\n\n\n\n\n\n\nframe1.stack()\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64\n\n\n\nframe2 = pd.DataFrame(np.arange(12).reshape((4, 3)),\n            index=pd.MultiIndex.from_arrays([[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]], names=[\"idx1\", \"idx2\"]),\n            columns=pd.MultiIndex.from_arrays([[\"Ohio\", \"Ohio\", \"Colorado\"], [\"Green\", \"Red\", \"Green\"]], names=[\"state\", \"color\"]))\nframe2\n\n\n\n\n\n\n\n  \n    \n      \n      state\n      Ohio\n      Colorado\n    \n    \n      \n      color\n      Green\n      Red\n      Green\n    \n    \n      idx1\n      idx2\n      \n      \n      \n    \n  \n  \n    \n      a\n      1\n      0\n      1\n      2\n    \n    \n      2\n      3\n      4\n      5\n    \n    \n      b\n      1\n      6\n      7\n      8\n    \n    \n      2\n      9\n      10\n      11\n    \n  \n\n\n\n\n\n\nTime Series에 특화\n\nfb = pd.read_csv('data/fb_stock_prices_2018.csv', index_col='date', parse_dates=True)\nfb.plot(kind='line', y=['high', 'low'], figsize=(7, 4), title='Facebook Stock 2018')\nplt.show()\n\n\n\n\n\nfb.head()\n\n\n\n\n\n  \n    \n      \n      open\n      high\n      low\n      close\n      volume\n    \n    \n      date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2018-01-02\n      177.68\n      181.58\n      177.55\n      181.42\n      18151903\n    \n    \n      2018-01-03\n      181.88\n      184.78\n      181.33\n      184.67\n      16886563\n    \n    \n      2018-01-04\n      184.90\n      186.21\n      184.10\n      184.33\n      13880896\n    \n    \n      2018-01-05\n      185.59\n      186.90\n      184.93\n      186.85\n      13574535\n    \n    \n      2018-01-08\n      187.20\n      188.90\n      186.33\n      188.28\n      17994726\n    \n  \n\n\n\n\nindex없이 분석 가능?\nindex의 활용은 강의 후반부에…"
  },
  {
    "objectID": "contents/pandas.html#copy-vs.-view",
    "href": "contents/pandas.html#copy-vs.-view",
    "title": "NumPy and pandas",
    "section": "Copy vs. View",
    "text": "Copy vs. View"
  },
  {
    "objectID": "contents/others.html",
    "href": "contents/others.html",
    "title": "class2301",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\nwdi_data = (\n    \"https://raw.githubusercontent.com/nickeubank/\"\n    \"practicaldatascience/master/Example_Data/wdi_plotting.csv\"\n)\nworld = pd.read_csv(wdi_data)\n\nnames = world.columns[3:].to_list()\n\nnames.append(\"GDP per capita (constant 2015 US$)\")\n\ncountries = world[\"Country Code\"].unique()\n\n\nwdi = pd.read_parquet(\"data/wdi.parquet\")\nwdi2 = wdi[wdi[\"Indicator Name\"].isin(names) & wdi[\"Country Code\"].isin(countries)].copy()\n\nindic_name = wdi2[\"Indicator Name\"].unique()\n\nwdi2.columns = wdi2.columns.str.replace(\" \", \"_\")\nwdi2.rename(str.lower, axis=1, inplace=True)\n\ndic = dict(zip(indic_name, [\"CO2\", \"GDP\", \"life_exp\", \"literacy\", \"mortality\", \"child_mortality\", \"polution\", \"pop\"]))\nwdi2 = wdi2.replace({\"indicator_name\": dic})\n\nyears = wdi2.loc[:, '1960':'2021'].columns\n\nwdi2_long1 = wdi2.melt(\n    id_vars=wdi2.columns[:4], \n    value_vars=years, \n    value_name=\"values\",\n    var_name=\"year\"\n)\n\nwdi2_long1 = wdi2_long1.drop(columns=\"indicator_code\")\n\nwdi2_long2 = wdi2_long1.pivot(\n    index=[\"country_name\",  \"country_code\", \"year\"], columns=\"indicator_name\", \n    values=\"values\"\n)\n\nwdi2_long2.columns.name = \"\"\nwdi2_long2 = wdi2_long2.reset_index()\nwdi2_long2[\"year\"] = wdi2_long2.year.astype(int)\n\n\n\nindicators = wdi[\"Indicator Name\"].unique()\nindicators = pd.Series(indicators)\n\nindicators[indicators.str.contains(\"region\")]\n\n751    Merchandise exports to low- and middle-income ...\n752    Merchandise exports to low- and middle-income ...\n764    Merchandise imports from low- and middle-incom...\n765    Merchandise imports from low- and middle-incom...\ndtype: object\n\n\n\nwdi_country = pd.read_csv(\"data/WDICountry.csv\")\n\nwdi2_long2 = wdi2_long2.merge(wdi_country[[\"Country Code\", \"Short Name\", \"Region\"]], left_on=\"country_code\", right_on=\"Country Code\", how=\"left\")\n\nwdi2_long2.drop(columns=[\"Country Code\"], inplace=True)\n\nwdi2_long2.rename(columns={\"Region\": \"region\", \"Short Name\": \"country\"}, inplace=True)\n\n\nwdi2_long2.region.value_counts(dropna=False)\n\nEurope & Central Asia         3596\nSub-Saharan Africa            2976\nLatin America & Caribbean     2604\nEast Asia & Pacific           2294\nMiddle East & North Africa    1302\nSouth Asia                     496\nNorth America                  186\nName: region, dtype: int64\n\n\n\nwdi_2020 = wdi2_long2.query('year == 2020')\n\nwdi_2020 = wdi_2020.assign(\n    log_gdp = lambda x: np.log(x.GDP),\n    log_child_mortality = lambda x: np.log(x.child_mortality),\n)\n\n\nbig_countries = wdi_2020.nlargest(10, \"pop\")[\"country\"]\nidx = wdi_2020[\"country\"].isin(big_countries)\nwdi_2020_big = wdi_2020[idx]\n\n\n(\n    so.Plot(wdi_2020, x=\"log_gdp\", y=\"child_mortality\")\n    .add(so.Dot(edgecolor=\"white\", alpha=.5), pointsize=\"pop\", color=\"region\")\n    .scale(pointsize=(6, 50), color=\"Set2\")\n    .layout(size=(8, 8))\n    .add(so.Text(halign=\"left\", offset=20), \n         x=wdi_2020_big.log_gdp, \n         y=wdi_2020_big.child_mortality, \n         text=wdi_2020_big.country)\n)\n\n\n\n\n\nwdi_2020_2 = wdi_2020.dropna(subset=[\"log_gdp\", \"log_child_mortality\", \"pop\"])\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\nfig = px.scatter(wdi_2020_2, \n                 x=\"log_gdp\", y=\"child_mortality\", \n                 size=\"pop\", size_max=40,\n                 hover_name=\"country_name\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nwdi_2020.head()\n\n\n\n\n\n  \n    \n      \n      country_name\n      country_code\n      year\n      CO2\n      GDP\n      child_mortality\n      life_exp\n      literacy\n      mortality\n      polution\n      pop\n      country\n      region\n      log_gdp\n      log_child_mortality\n    \n  \n  \n    \n      60\n      Afghanistan\n      AFG\n      2020\n      NaN\n      553.036479\n      58.0\n      62.575\n      NaN\n      NaN\n      NaN\n      38972230.0\n      Afghanistan\n      South Asia\n      6.315424\n      4.060443\n    \n    \n      122\n      Albania\n      ALB\n      2020\n      NaN\n      4410.455165\n      9.8\n      76.989\n      NaN\n      NaN\n      NaN\n      2837849.0\n      Albania\n      Europe & Central Asia\n      8.391733\n      2.282382\n    \n    \n      184\n      Algeria\n      DZA\n      2020\n      NaN\n      3873.510015\n      22.7\n      74.453\n      NaN\n      NaN\n      NaN\n      43451666.0\n      Algeria\n      Middle East & North Africa\n      8.261916\n      3.122365\n    \n    \n      246\n      American Samoa\n      ASM\n      2020\n      NaN\n      14303.627033\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      46189.0\n      American Samoa\n      East Asia & Pacific\n      9.568268\n      NaN\n    \n    \n      308\n      Andorra\n      AND\n      2020\n      NaN\n      34394.277553\n      2.5\n      NaN\n      NaN\n      NaN\n      NaN\n      77700.0\n      Andorra\n      Europe & Central Asia\n      10.445645\n      0.916291\n    \n  \n\n\n\n\n\nwdi_2020.to_csv(\"data/wdi_2020.csv\", index=False)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "contents/eda.html#statistical-transformations",
    "href": "contents/eda.html#statistical-transformations",
    "title": "Exploratory data analysis",
    "section": "Statistical transformations",
    "text": "Statistical transformations\nAgg, Est, Count, Hist, KDE, Perc, PolyFit\n\n\n\n\n\n\nNote\n\n\n\n현재 seaborn.objects에서 다음 두 가지 중요한 statistical transformations이 제공되지 않고 있음\n\nFitted line을 보여주는 loess line\n분포의 간략한 summary인 boxplot\n\n이 부분에 대해서는 다음 몇 가지 대안이 있음\n\n\n\n\n\n\n\n\nNote\n\n\n\nData에 fitted curve를 구하는 방식에는 여러 방법이 있음\n\nLinear fit: 1차 함수형태로 fit\nSmoothing fit\n\nPolynominal fit: n차 다항함수형태로 fit\nLoess/lowess: locally estimated/weighted scatterplot smoothing\nGAM: generalized additive model\nSpine: piece-wise polynominal regression\n\n\n나중에 좀 더 자세히 알아봄\n현재 seaborn.objects에서는 polynomial fit만 제공\n\n\n\nFitted lines\n\nseaborn.objects\n\nleft = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot())\n    .add(so.Line(), so.PolyFit(5)) # PolyFit(n): n차 다항식으로 fit\n)\n\nright = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Line(), so.PolyFit(5)) # PolyFit(n): n차 다항식으로 fit\n)\n\n\n\n\n\n\n\n\n(a) Scatterplot + trendline\n\n\n\n\n\n\n\n(b) Trendline only\n\n\n\n\nFigure 3: 데이터로부터 계산을 한 후 플랏이 그려짐\n\n\n\nleft = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"drv\") # color mapping이 이후 모든 layer에 적용\n    .add(so.Dot())\n    .add(so.Line(), so.PolyFit(5))\n)\n\nright = (\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"drv\") # color mapping이 이 layer에만 적용\n    .add(so.Line(), so.PolyFit(5))\n)\n\n\n\n\n\n\n\n\n(a) color가 모든 layers에 적용: global mapping\n\n\n\n\n\n\n\n(b) color가 두번째 layer에만 적용: local mapping\n\n\n\n\nFigure 4: Inherited mapping\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"drv\")\n    .add(so.Line(), so.PolyFit(5), group=\"drv\") # color가 아닌 group으로 grouping\n)\n\n\n\n\nLinear fit vs. smoothing fit:\n선형적인 트렌드에서 얼마나 벗어나는가?\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\".6\"))\n    .add(so.Line(), so.PolyFit(5))\n    .add(so.Line(), so.PolyFit(1))\n)\n\n\n\n\nAlternatives: plotly, seaborn\n\nPlotly express\n\n\nimport plotly.express as px\n\npx.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", trendline=\"lowess\")\n\n\n                                                \n\n\n다음과 같이 smoothing parameter를 지정할 수 있음\n자세한 옵션은 여기 참조: plotly linear-fits\n\n(\n    px.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", \n               trendline=\"lowess\", trendline_options=dict(frac=0.3)) # smoothing parameter \n    .update_layout(width=600, height=500)\n)\n\n\n\nSeaborn: lmplot()\n\n\nsns.lmplot(mpg, x=\"displ\", y=\"hwy\", hue=\"drv\", # color대신 hue\n           lowess=True, \n           scatter_kws={\"alpha\":.5, \"s\":20}, # s: point size\n           height=3, aspect=5/3) \nplt.show() # 생략해도 무방\n\n\n\n\n\ndiamonds = sns.load_dataset(\"diamonds\")\n\n\n(\n    so.Plot(diamonds_small, x=\"carat\", y=\"price\")\n    .add(so.Dot(alpha=.01))\n    .add(so.Line(color=\"red\"), so.PolyFit(5))\n)\n\n\n\n\n\n\nSeaborn\n\npx.scatter(mpg, x=\"displ\", y=\"hwy\", trendline=\"lowess\", trendline_options=dict(frac=1/3))\n\n\n\n\n\nimport plotly.express as px\npx.box(penguins.dropna(subset=[\"sex\"]), x=\"species\", y=\"bill_length_mm\", color=\"island\",  facet_col=\"sex\")\n\n\n\n\n\nsns.catplot(\n    data=penguins, x=\"species\", y=\"bill_length_mm\", hue=\"island\", col=\"sex\",\n    kind=\"box\", height=4, aspect=.6,\n)\nplt.show()\n\n\n\n\n\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")\nfig.show()\n\n\n\n\n\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"smoker\")\nfig.show()\n\n\n\n\n\n\n\nOverploting\n\n\nAdding multiple layers"
  },
  {
    "objectID": "contents/visualizatioin.html",
    "href": "contents/visualizatioin.html",
    "title": "class2301",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\nimport seaborn.objects as so\nimport seaborn as sns\n\nimport statsmodels.api as sm\n\nimport plotly.express as px\n\n# defeif\n\n\ndiamonds = sm.datasets.get_rdataset(\"diamonds\", \"ggplot2\").data\ndiamonds.head()\n\n\n\n\n\n  \n    \n      \n      carat\n      cut\n      color\n      clarity\n      depth\n      table\n      price\n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0.23\n      Ideal\n      E\n      SI2\n      61.5\n      55.0\n      326\n      3.95\n      3.98\n      2.43\n    \n    \n      1\n      0.21\n      Premium\n      E\n      SI1\n      59.8\n      61.0\n      326\n      3.89\n      3.84\n      2.31\n    \n    \n      2\n      0.23\n      Good\n      E\n      VS1\n      56.9\n      65.0\n      327\n      4.05\n      4.07\n      2.31\n    \n    \n      3\n      0.29\n      Premium\n      I\n      VS2\n      62.4\n      58.0\n      334\n      4.20\n      4.23\n      2.63\n    \n    \n      4\n      0.31\n      Good\n      J\n      SI2\n      63.3\n      58.0\n      335\n      4.34\n      4.35\n      2.75\n    \n  \n\n\n\n\n\nflights = sm.datasets.get_rdataset(\"flights\", \"nycflights13\").data\nflights.head()\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      day\n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      carrier\n      flight\n      tailnum\n      origin\n      dest\n      air_time\n      distance\n      hour\n      minute\n      time_hour\n    \n  \n  \n    \n      0\n      2013\n      1\n      1\n      517.0\n      515\n      2.0\n      830.0\n      819\n      11.0\n      UA\n      1545\n      N14228\n      EWR\n      IAH\n      227.0\n      1400\n      5\n      15\n      2013-01-01 05:00:00\n    \n    \n      1\n      2013\n      1\n      1\n      533.0\n      529\n      4.0\n      850.0\n      830\n      20.0\n      UA\n      1714\n      N24211\n      LGA\n      IAH\n      227.0\n      1416\n      5\n      29\n      2013-01-01 05:00:00\n    \n    \n      2\n      2013\n      1\n      1\n      542.0\n      540\n      2.0\n      923.0\n      850\n      33.0\n      AA\n      1141\n      N619AA\n      JFK\n      MIA\n      160.0\n      1089\n      5\n      40\n      2013-01-01 05:00:00\n    \n    \n      3\n      2013\n      1\n      1\n      544.0\n      545\n      -1.0\n      1004.0\n      1022\n      -18.0\n      B6\n      725\n      N804JB\n      JFK\n      BQN\n      183.0\n      1576\n      5\n      45\n      2013-01-01 05:00:00\n    \n    \n      4\n      2013\n      1\n      1\n      554.0\n      600\n      -6.0\n      812.0\n      837\n      -25.0\n      DL\n      461\n      N668DN\n      LGA\n      ATL\n      116.0\n      762\n      6\n      0\n      2013-01-01 06:00:00\n    \n  \n\n\n\n\n\nmpg = sm.datasets.get_rdataset(\"mpg\", \"ggplot2\").data\nmpg.head()\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n  \n\n\n\n\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.1\n      18.7\n      181.0\n      3750.0\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.5\n      17.4\n      186.0\n      3800.0\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.3\n      18.0\n      195.0\n      3250.0\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.7\n      19.3\n      193.0\n      3450.0\n      Female\n    \n  \n\n\n\n\n\ntips = sns.load_dataset(\"tips\")\ntips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\nhealthexp = sns.load_dataset(\"healthexp\")\nhealthexp.head()\n\n\n\n\n\n  \n    \n      \n      Year\n      Country\n      Spending_USD\n      Life_Expectancy\n    \n  \n  \n    \n      0\n      1970\n      Germany\n      252.311\n      70.6\n    \n    \n      1\n      1970\n      France\n      192.143\n      72.2\n    \n    \n      2\n      1970\n      Great Britain\n      123.993\n      71.9\n    \n    \n      3\n      1970\n      Japan\n      150.437\n      72.0\n    \n    \n      4\n      1970\n      USA\n      326.961\n      70.9\n    \n  \n\n\n\n\n\n(\n    so.Plot(tips, x=\"total_bill\", y=\"tip\", color=\"time\")\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit())\n    .add(so.Line(), so.PolyFit(1))\n)\n\n\n\n\n\nsns.lmplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\", lowess=True, col=\"sex\", height=5, aspect=2/3, scatter_kws={\"alpha\":.8, \"s\":5})\n\n<seaborn.axisgrid.FacetGrid at 0x158621e90>\n\n\n\n\n\n\n# https://plotly.com/python/linear-fits/\npx.scatter(tips, x=\"total_bill\", y=\"tip\", color=\"time\", trendline=\"lowess\", \ntrendline_options=dict(frac=3/10)) # default: 2/3\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\ng = sns.catplot(data=tips, x=\"day\", y=\"total_bill\", kind=\"violin\", inner=None)\n\n\n\n\n\nsns.swarmplot(data=tips, x=\"day\", y=\"total_bill\", color=\"k\", size=3, ax=g.ax)\n\n<AxesSubplot: xlabel='day', ylabel='total_bill'>\n\n\n\npenguins = sns.load_dataset(\"penguins\")\n\nsns.set_palette(\"Set3\")\n\nsns.lmplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", lowess=True, col=\"sex\", height=3, scatter_kws={\"alpha\":.5, \"s\":5})\n\n<seaborn.axisgrid.FacetGrid at 0x16583df50>\n\n\n\n\n\n\n(\n    so.Plot(x=penguins[\"bill_length_mm\"], y=penguins[\"bill_depth_mm\"])\n    .add(so.Dots(), color=penguins[\"species\"])\n    .add(so.Line(), so.PolyFit())\n    .add(so.Line(), so.PolyFit(1))\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit())\n    .facet(col=\"sex\")\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\n    .add(so.Dots())\n    .add(so.Line(), so.PolyFit())\n    .facet(col=\"sex\")\n)\n\n\n\n\n\n\npx.scatter(penguins.query('~@pd.isna(sex)'), x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\", opacity=.3,\n     facet_col=\"sex\", trendline=\"lowess\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\npx.scatter(penguins.dropna(subset=\"sex\"), x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\",\n     facet_col=\"sex\", trendline=\"lowess\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\npenguins\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.1\n      18.7\n      181.0\n      3750.0\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.5\n      17.4\n      186.0\n      3800.0\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.3\n      18.0\n      195.0\n      3250.0\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.7\n      19.3\n      193.0\n      3450.0\n      Female\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      339\n      Gentoo\n      Biscoe\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      340\n      Gentoo\n      Biscoe\n      46.8\n      14.3\n      215.0\n      4850.0\n      Female\n    \n    \n      341\n      Gentoo\n      Biscoe\n      50.4\n      15.7\n      222.0\n      5750.0\n      Male\n    \n    \n      342\n      Gentoo\n      Biscoe\n      45.2\n      14.8\n      212.0\n      5200.0\n      Female\n    \n    \n      343\n      Gentoo\n      Biscoe\n      49.9\n      16.1\n      213.0\n      5400.0\n      Male\n    \n  \n\n344 rows × 7 columns\n\n\n\n\n(\n    so.Plot(penguins, x=\"bill_length_mm\", color=\"species\")\n    #.add(so.Dots(), so.Hist())\n    .add(so.Line(marker=\".\"), so.Hist(binwidth=2))\n    #.add(so.Line(), so.PolyFit())\n    .facet(col=\"sex\")\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"bill_length_mm\", color=\"species\")\n    .add(so.Area(), so.Hist(binwidth=2))\n    .facet(col=\"sex\")\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"flipper_length_mm\")\n    .add(so.Bars(), so.Hist(binwidth=10))\n)\n\n\n\n\n\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Bar(), so.Count())\n)\n\n\n\n\n\nhealthexp = sns.load_dataset(\"healthexp\")\np = so.Plot(healthexp, \"Spending_USD\", \"Life_Expectancy\", color=\"Country\")\np.add(so.Path())\n\n\n\n\n\nhealthexp = sns.load_dataset(\"healthexp\")\np = so.Plot(healthexp, \"Spending_USD\", \"Life_Expectancy\", color=\"Country\")\np.add(so.Line())\n\n\n\n\n\nhealthexp = sns.load_dataset(\"healthexp\")\np = so.Plot(healthexp, \"Spending_USD\", \"Life_Expectancy\")\n\nhline = pd.DataFrame({\"x\": [0, 12000], \"y\": [80, 80]})\n\n(\n    p.add(so.Line(), color=\"Country\")\n    .add(so.Line(linestyle=\":\", color=\"red\"), x=hline.x, y=hline.y)\n)\n\n\n\n\n\nimport plotly.express as px\n\ndf = px.data.tips()\npx.scatter(df, x=\"total_bill\", y=\"tip\", color=\"day\", \n     facet_col=\"day\", facet_col_wrap=2, trendline=\"lowess\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nsns.jointplot(tips, x=\"total_bill\", y=\"tip\", kind=\"hex\")\n\n<seaborn.axisgrid.JointGrid at 0x16530f310>\n\n\n\n\n\n\nsns.histplot(penguins, x=\"bill_depth_mm\", y=\"body_mass_g\", hue=\"species\")\n\n<AxesSubplot: xlabel='bill_depth_mm', ylabel='body_mass_g'>\n\n\n\n\n\n\ndiamonds = sns.load_dataset(\"diamonds\")\ndiamonds.head()\n\n\n\n\n\n  \n    \n      \n      carat\n      cut\n      color\n      clarity\n      depth\n      table\n      price\n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0.23\n      Ideal\n      E\n      SI2\n      61.5\n      55.0\n      326\n      3.95\n      3.98\n      2.43\n    \n    \n      1\n      0.21\n      Premium\n      E\n      SI1\n      59.8\n      61.0\n      326\n      3.89\n      3.84\n      2.31\n    \n    \n      2\n      0.23\n      Good\n      E\n      VS1\n      56.9\n      65.0\n      327\n      4.05\n      4.07\n      2.31\n    \n    \n      3\n      0.29\n      Premium\n      I\n      VS2\n      62.4\n      58.0\n      334\n      4.20\n      4.23\n      2.63\n    \n    \n      4\n      0.31\n      Good\n      J\n      SI2\n      63.3\n      58.0\n      335\n      4.34\n      4.35\n      2.75\n    \n  \n\n\n\n\n\nsns.histplot(diamonds, x=\"carat\", y=\"price\", bins=20)\n\n<AxesSubplot: xlabel='carat', ylabel='price'>\n\n\n\n\n\n\ng = sns.relplot(diamonds, x=\"carat\", y=\"price\", kind=\"scatter\", color=\"red\")\nsns.histplot(diamonds, x=\"carat\", y=\"price\", bins=20, ax=g.ax, alpha=.5)\n\n<AxesSubplot: xlabel='carat', ylabel='price'>\n\n\n\n\n\n\npenguins.groupby([\"sex\", \"species\"]).size()\n\nsex     species  \nFemale  Adelie       73\n        Chinstrap    34\n        Gentoo       58\nMale    Adelie       73\n        Chinstrap    34\n        Gentoo       61\ndtype: int64\n\n\n\ndf = penguins[[\"sex\", \"species\"]].value_counts(sort=False).reset_index(name=\"n\")\ndf[\"prop\"] = df[\"n\"] / df.groupby(\"sex\")[\"n\"].transform(\"sum\")\n\n(\n    so.Plot(df, x=\"species\", y=\"prop\", color=\"species\")\n    .add(so.Bar())\n    .facet(\"sex\")\n    .scale(\n        y=so.Continuous().label(like=\"{x:.1%}\"),\n        color=\"Set1\"\n    )\n)\n\n#     .scale(\n#         x=so.Continuous(trans=\"sqrt\").tick(every=.5),\n#         y=so.Continuous().label(like=\"${x:,.1%}\"),\n#         color=so.Continuous(\"ch:.2\").tick(upto=4).label(unit=\"m\"),\n\n\n\n\n\n(\n    so.Plot(data=penguins, x=\"species\", color=\"island\")\n    .add(so.Bars(width=.8), so.Hist(stat=\"proportion\", common_norm=[\"x\"]), so.Stack())\n)\n\n/Users/georgeair/miniconda3/envs/envconda/lib/python3.11/site-packages/seaborn/_stats/counting.py:228: UserWarning:\n\nUndefined variable(s) passed for Hist.common_norm: 'x'.\n\n\n\n\n\n\n\ntips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\n(\n    so.Plot(data=tips, x=\"day\", color=\"smoker\")\n    .add(so.Bars(width=.8), so.Hist(stat=\"proportion\", common_norm=[\"x\"]), so.Stack())\n)\n\n/Users/georgeair/miniconda3/envs/envconda/lib/python3.11/site-packages/seaborn/_stats/counting.py:228: UserWarning:\n\nUndefined variable(s) passed for Hist.common_norm: 'x'.\n\n\n\n\n\n\n\n(\n    so.Plot(data=tips, x=\"day\", color=\"smoker\")\n    .add(so.Bars(width=.8), so.Hist(stat=\"proportion\", common_norm=[\"col\", \"x\"]), so.Stack())\n    .facet(\"sex\")\n    .label(col=\"Sex:\")\n)\n\n/Users/georgeair/miniconda3/envs/envconda/lib/python3.11/site-packages/seaborn/_stats/counting.py:228: UserWarning:\n\nUndefined variable(s) passed for Hist.common_norm: 'x'.\n\n\n\n\n\n\n\np = so.Plot(penguins, \"flipper_length_mm\")\np = p.facet(\"island\")\n\np.add(so.Bars(width=.8, ), so.Hist(stat=\"proportion\", common_norm=[\"col\"]), so.Dodge(), color=\"sex\")\n\n\n\n\n\np.add(so.Bars(), so.Hist(stat=\"proportion\", common_norm=[\"sex\"]), color=\"sex\")\n\n/Users/georgeair/miniconda3/envs/envconda/lib/python3.11/site-packages/seaborn/_stats/counting.py:228: UserWarning:\n\nUndefined variable(s) passed for Hist.common_norm: 'sex'.\n\n\n\n\n\n\n\np = (\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n    .facet(col=\"species\", row=\"sex\")\n    .add(so.Dots())\n)\np.share(x=False, y=True)\n\n\n\n\n\n(\n    so.Plot(penguins, y=\"flipper_length_mm\")\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"])\n    .add(so.Dots())\n    .share(x=True)\n)\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\np = so.Plot(diamonds, \"carat\", \"price\").add(so.Dots())\nq = so.Plot(diamonds, \"carat\", \"price\").add(so.Line(), so.PolyFit())\n\nf = mpl.figure.Figure(figsize=(7, 4))\nsf1, sf2 = f.subfigures(1, 2)\n\np.on(sf1).plot()\nq.on(sf2).plot()\n\n\n\n\n\n(\n    so.Plot(tips, x=\"total_bill\", y=\"size\", color=\"time\")\n    .add(so.Dot(alpha=.5), so.Jitter(.4), orient=\"y\")\n)\n\n\n\n\n\ng = sns.FacetGrid(tips, col=\"time\",  row=\"sex\")\ng.map_dataframe(sns.histplot, x=\"total_bill\")\n\n<seaborn.axisgrid.FacetGrid at 0x16336a550>\n\n\n\n\n\n\ng = sns.FacetGrid(tips, col=\"time\")\ng.map_dataframe(sns.boxplot, x=\"day\", y=\"total_bill\", hue=\"day\")\n\n<seaborn.axisgrid.FacetGrid at 0x284013690>\n\n\n\n\n\n\ng = sns.FacetGrid(tips, col=\"time\", margin_titles=True)\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.refline(y=tips[\"tip\"].median())\n\n<seaborn.axisgrid.FacetGrid at 0x28450b8d0>\n\n\n\n\n\n\npx.box(tips, x=\"day\", y=\"total_bill\", \n    color=\"day\", points=\"all\", facet_col=\"time\",\n    category_orders={\"day\": tips.day.values.categories.values})\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# https://plotly.com/python/axes/\n(\n  px.scatter(tips, x=\"total_bill\", y=\"tip\", color=\"day\", \n     facet_col=\"day\", facet_col_wrap=2, trendline=\"ols\")\n    .update_yaxes(scaleanchor = \"x\", scaleratio = 3)\n    #.update_xaxes(range=[10, 40], constrain=\"domain\")\n    .update_xaxes(range=[10, 40])\n    .add_hline(y=5, fillcolor=\"white\")\n    .update_layout(width=800, height=500)\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# https://plotly.com/python/axes/\n(\n  px.scatter(tips, x=\"total_bill\", y=\"tip\", color=\"day\", \n     facet_col=\"day\", facet_col_wrap=2, trendline=\"ols\")\n    .update_yaxes(scaleanchor = \"x\", scaleratio = 3)\n    .update_xaxes(range=[10, 40], constrain=\"domain\")\n    #.update_xaxes(range=[10, 40])\n    .add_hline(y=2, line_color=\"white\", line_width=3, line_dash=\"dash\")\n    .update_layout(width=800, height=500)\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n#https://plotly.com/python/creating-and-updating-figures/\n\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=1)\n\nfig.add_scatter(y=[4, 2, 1], mode=\"lines\", row=1, col=1)\nfig.add_bar(y=[2, 1, 3], row=1, col=1)\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# https://seaborn.pydata.org/generated/seaborn.objects.Plot.scale.html\n\n(\n    so.Plot(mpg, x=\"cyl\")\n    .add(so.Bar(), so.Hist())\n    .scale(x=so.Nominal())\n    .label(x=\"cylinder\", y=\"count\",\n        title=\"the number of cars by cylinder\")\n)\n\n\n\n\n\nimport matplotlib.pyplot as plt\nsns.set(style=\"darkgrid\")\ndf = sns.load_dataset('iris')\n\n# Usual boxplot\nax = sns.boxplot(x='species', y='sepal_length', data=df)\n \n# Add jitter with the swarmplot function\nax = sns.swarmplot(x='species', y='sepal_length', data=df, color=\"grey\")\nplt.show()\n\n\n\n\n\nax = sns.stripplot(data=tips, x=\"day\", y=\"total_bill\", alpha=.5)\nax = sns.boxplot(data=tips, x=\"day\", y=\"total_bill\")\nax = sns.violinplot(data=tips, x=\"day\", y=\"total_bill\")\n\nplt.show()\n\n\n\n\n\nsns.pairplot(penguins, hue=\"species\", kind=\"reg\",\n    markers=[\".\", \".\", \".\"])\n\n<seaborn.axisgrid.PairGrid at 0x163058810>\n\n\n\n\n\n\ncor_mat.head()\n\n\n\n\n\n  \n    \n      \n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n    \n  \n  \n    \n      bill_length_mm\n      1.000000\n      -0.235053\n      0.656181\n      0.595110\n    \n    \n      bill_depth_mm\n      -0.235053\n      1.000000\n      -0.583851\n      -0.471916\n    \n    \n      flipper_length_mm\n      0.656181\n      -0.583851\n      1.000000\n      0.871202\n    \n    \n      body_mass_g\n      0.595110\n      -0.471916\n      0.871202\n      1.000000\n    \n  \n\n\n\n\n\ncor_mat = penguins.corr(numeric_only=True)\nsns.heatmap(cor_mat, annot=True, cmap=\"crest\", vmin=-1, vmax=1)\n\n<AxesSubplot: >\n\n\n\n\n\n\nmask = np.triu(np.ones_like(cor_mat, dtype=bool))\nnp.fill_diagonal(mask, False)\nmask\n\narray([[False,  True,  True,  True],\n       [False, False,  True,  True],\n       [False, False, False,  True],\n       [False, False, False, False]])\n\n\n\ndef cor_heatmap(df, font=10, abs=False):\n    if abs:\n        df = np.abs(df)\n    mask = np.triu(np.ones_like(df, dtype=bool))\n    np.fill_diagonal(mask, False)\n    cmap = sns.diverging_palette(205, 12, s=100, l=55, as_cmap=True)\n    \n    ax = sns.heatmap(df, annot=True, cmap=cmap, vmin=-1, vmax=1, mask=mask,\n    annot_kws={\"size\": font})\n    ax.set(xlabel=\"\", ylabel=\"\")\n    ax.set_xticks(ax.get_xticks(), ax.get_xticklabels(), rotation=45, ha='right')\n\ncor_heatmap(cor_mat)\n\n\n\n\n\nmtcars = sm.datasets.get_rdataset(\"mtcars\").data\n\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\ncor_heatmap(mtcars.corr(), 9, abs=True)\n\n\n\n\n\nfrom vega_datasets import data\ngapminder = data.gapminder()\ngap = gapminder[[\"country\", \"year\", \"life_expect\", \"cluster\"]]\n\n\ngap.iloc[:,:-1].set_index([\"country\", \"year\"]).unstack().head()\n\n\n\n\n\n  \n    \n      \n      life_expect\n    \n    \n      year\n      1955\n      1960\n      1965\n      1970\n      1975\n      1980\n      1985\n      1990\n      1995\n      2000\n      2005\n    \n    \n      country\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Afghanistan\n      30.332\n      31.997\n      34.020\n      36.088\n      38.438\n      39.854\n      40.822\n      41.674\n      41.763\n      42.129\n      43.828\n    \n    \n      Argentina\n      64.399\n      65.142\n      65.634\n      67.065\n      68.481\n      69.942\n      70.774\n      71.868\n      73.275\n      74.340\n      75.320\n    \n    \n      Aruba\n      64.381\n      66.606\n      68.336\n      70.941\n      71.830\n      74.116\n      74.494\n      74.108\n      73.011\n      73.451\n      74.239\n    \n    \n      Australia\n      70.330\n      70.930\n      71.100\n      71.930\n      73.490\n      74.740\n      76.320\n      77.560\n      78.830\n      80.370\n      81.235\n    \n    \n      Austria\n      67.480\n      69.540\n      70.140\n      70.630\n      72.170\n      73.180\n      74.940\n      76.040\n      77.510\n      78.980\n      79.829\n    \n  \n\n\n\n\n\ngap_wide = gap.pivot(index=[\"country\"], columns=\"year\", values=\"life_expect\")\ngap_wide.head()\n\n\n\n\n\n  \n    \n      year\n      1955\n      1960\n      1965\n      1970\n      1975\n      1980\n      1985\n      1990\n      1995\n      2000\n      2005\n    \n    \n      country\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Afghanistan\n      30.332\n      31.997\n      34.020\n      36.088\n      38.438\n      39.854\n      40.822\n      41.674\n      41.763\n      42.129\n      43.828\n    \n    \n      Argentina\n      64.399\n      65.142\n      65.634\n      67.065\n      68.481\n      69.942\n      70.774\n      71.868\n      73.275\n      74.340\n      75.320\n    \n    \n      Aruba\n      64.381\n      66.606\n      68.336\n      70.941\n      71.830\n      74.116\n      74.494\n      74.108\n      73.011\n      73.451\n      74.239\n    \n    \n      Australia\n      70.330\n      70.930\n      71.100\n      71.930\n      73.490\n      74.740\n      76.320\n      77.560\n      78.830\n      80.370\n      81.235\n    \n    \n      Austria\n      67.480\n      69.540\n      70.140\n      70.630\n      72.170\n      73.180\n      74.940\n      76.040\n      77.510\n      78.980\n      79.829\n    \n  \n\n\n\n\n\nsns.clustermap(gap_wide, col_cluster=False, cmap=\"crest\", cbar_pos=(1, 0.1, .02, .5))\n\n<seaborn.matrix.ClusterGrid at 0x117f97850>\n\n\n\n\n\n\nR for Data Science\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"class\")\n    .add(so.Dot(alpha=.2))\n)\n\n\n\n\n\nmpg.head()\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n  \n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", pointsize=\"class\")\n    .add(so.Dots(alpha=.5, fill=True))\n    .scale(pointsize=(1, 20))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", alpha=\"class\")\n    .add(so.Dot(pointsize=10))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", marker=\"class\")\n    .add(so.Dots(pointsize=10))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", stroke=\"class\")\n    .add(so.Dots())\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(color=\"blue\"))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dots(stroke=2, pointsize=10, fill=False))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot())\n    .facet(\"class\", wrap=4) # default: col\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot())\n    .facet(row=\"class\", wrap=3)\n)\n\n\n\n\n\n(\n    so.Plot(tips, x=\"total_bill\", y=\"tip\", pointsize=\"size\", color=\"size\")\n    .add(so.Dot(edgecolor=\"white\"))\n    .scale(pointsize=(3, 20))\n\n)\n\n\n\n\n\n# parsing function\ndef make_datetime_100(data, time):\n    date_data = (data[['year', 'month', 'day', time]].\n        assign(\n            hour = lambda x: x[time] // 100,\n            minute = lambda x: x[time] % 100).\n        filter(['year', 'month', 'day', 'hour', 'minute'])\n    )\n    \n    out = pd.to_datetime(date_data)\n\n    return out\n\n# data table\nflights_dt = (flights.\n    query('(dep_time.notna()) & (arr_time.notna())').\n    assign(\n        dep_time = lambda x: make_datetime_100(x, 'dep_time'),\n        arr_time = lambda x: make_datetime_100(x, 'arr_time'),\n        sched_dep_time = lambda x: make_datetime_100(x, 'sched_dep_time'),\n        sched_arr_time = lambda x: make_datetime_100(x, 'sched_arr_time')\n    ).\n    filter( regex = 'origin|dest|delay$|time$')\n)\n\n\nflights_dt.head()\n\n\n\n\n\n  \n    \n      \n      dep_time\n      sched_dep_time\n      dep_delay\n      arr_time\n      sched_arr_time\n      arr_delay\n      origin\n      dest\n      air_time\n    \n  \n  \n    \n      0\n      2013-01-01 05:17:00\n      2013-01-01 05:15:00\n      2.0\n      2013-01-01 08:30:00\n      2013-01-01 08:19:00\n      11.0\n      EWR\n      IAH\n      227.0\n    \n    \n      1\n      2013-01-01 05:33:00\n      2013-01-01 05:29:00\n      4.0\n      2013-01-01 08:50:00\n      2013-01-01 08:30:00\n      20.0\n      LGA\n      IAH\n      227.0\n    \n    \n      2\n      2013-01-01 05:42:00\n      2013-01-01 05:40:00\n      2.0\n      2013-01-01 09:23:00\n      2013-01-01 08:50:00\n      33.0\n      JFK\n      MIA\n      160.0\n    \n    \n      3\n      2013-01-01 05:44:00\n      2013-01-01 05:45:00\n      -1.0\n      2013-01-01 10:04:00\n      2013-01-01 10:22:00\n      -18.0\n      JFK\n      BQN\n      183.0\n    \n    \n      4\n      2013-01-01 05:54:00\n      2013-01-01 06:00:00\n      -6.0\n      2013-01-01 08:12:00\n      2013-01-01 08:37:00\n      -25.0\n      LGA\n      ATL\n      116.0\n    \n  \n\n\n\n\n\nplot_dat = (flights_dt.assign(\n    minute = lambda x: x.dep_time.dt.minute).\n    groupby('minute').\n    agg(\n        avg_delay = ('arr_delay', np.mean),\n        n = ('arr_delay', 'size')\n    ).reset_index()\n)\n\nso.Plot(plot_dat, x=\"minute\", y=\"avg_delay\").add(so.Line(marker=\"o\", edgecolor=\"red\", linewidth=2), linestyle=None)\n\n\n\n\n\n\n(\n    px.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", \n    trendline=\"lowess\", trendline_options=dict(frac=.5))\n    .update_layout(width=600, height=400)\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n(\n    px.scatter(mpg, x=\"displ\", y=\"hwy\", \n    trendline=\"lowess\", trendline_options=dict(frac=.5))\n    .update_layout(width=600, height=400)\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"drv\")\n    .add(so.Dot())\n    .add(so.Line(linewidth=2), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"drv\")\n    .add(so.Dot())\n    .add(so.Band(alpha=.7), so.Est())\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", linestyle=\"drv\")\n    .add(so.Line(linewidth=2), so.PolyFit(5))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", linestyle=\"drv\", color=\"drv\")\n    .add(so.Line(linewidth=2), so.PolyFit(5))\n)\n\n\n\n\n\nmpg_subcpt = mpg[mpg[\"class\"] == \"subcompact\"]\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\")\n    .add(so.Dot(), color=\"class\")\n    .add(so.Line(linewidth=2), so.PolyFit(5), \n        x=mpg_subcpt.displ,\n        y=mpg_subcpt.hwy)\n    .scale(color=\"Set2\")\n)\n\n\n\n\n\nmpg.head()\n\n\n\n\n\n  \n    \n      \n      manufacturer\n      model\n      displ\n      year\n      cyl\n      trans\n      drv\n      cty\n      hwy\n      fl\n      class\n    \n  \n  \n    \n      0\n      audi\n      a4\n      1.8\n      1999\n      4\n      auto(l5)\n      f\n      18\n      29\n      p\n      compact\n    \n    \n      1\n      audi\n      a4\n      1.8\n      1999\n      4\n      manual(m5)\n      f\n      21\n      29\n      p\n      compact\n    \n    \n      2\n      audi\n      a4\n      2.0\n      2008\n      4\n      manual(m6)\n      f\n      20\n      31\n      p\n      compact\n    \n    \n      3\n      audi\n      a4\n      2.0\n      2008\n      4\n      auto(av)\n      f\n      21\n      30\n      p\n      compact\n    \n    \n      4\n      audi\n      a4\n      2.8\n      1999\n      6\n      auto(l5)\n      f\n      16\n      26\n      p\n      compact\n    \n  \n\n\n\n\n\n(\n    so.Plot(mpg, x=\"displ\", y=\"hwy\", color=\"drv\")\n    .add(so.Dot(pointsize=10, edgecolor=\"white\", edgewidth=3))\n)\n\n\n\n\n\nsmaller = diamonds.query('carat < 3')\n\n(\n    so.Plot(smaller, x=\"carat\", color=\"cut\")\n    .add(so.Line(marker=\".\"), so.Hist(binwidth=.1))\n)\n\n\n\n\n\n(\n    so.Plot(smaller, x=\"carat\", color=\"cut\")\n    .add(so.Line(marker=\".\"), so.Hist(stat=\"probability\", binwidth=.1, common_norm=[\"color\"]))\n)\n\n\n\n\n\ncl = mpg.groupby(\"class\")[\"hwy\"].median().sort_values().index.values\npx.box(mpg, x=\"class\", y=\"hwy\", category_orders={\"class\": cl})\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\ncl = mpg.groupby(\"class\")[\"hwy\"].median().sort_values().index.values\n\npx.box(mpg, y=\"class\", x=\"hwy\", category_orders={\"class\": cl})\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\ncl = mpg.groupby(\"class\")[\"hwy\"].median().sort_values().index.values\n\n(\n    so.Plot(mpg, x=\"class\", y=\"hwy\")\n    .add(so.Dot(pointsize=10), so.Agg(\"median\"))\n    .scale(x=so.Nominal(order=cl))\n)\n\n\n\n\n\n(\n    so.Plot(mpg, x=\"class\", y=\"hwy\")\n    #.add(so.Dot(alpha=.3, pointsize=5), so.Jitter(width=.5))\n    .add(so.Dots(pointsize=5, color=\"dodgerblue\"), so.Jitter(width=.5))\n    .add(so.Range(color=\"orangered\"), so.Est(errorbar=\"sd\"))\n    .add(so.Dot(pointsize=8, color=\"orangered\"), so.Agg())\n    .add(so.Line(color=\"orangered\"), so.Agg())\n    .scale(x=so.Nominal(order=cl))\n)\n\n\n\n\n\nsns.boxplot(mpg, x=\"class\", y=\"hwy\")\n\n<AxesSubplot: xlabel='class', ylabel='hwy'>\n\n\n\n\n\n\nmpg.groupby(\"class\").boxplot(column=\"hwy\", subplots=False)\n\n<AxesSubplot: >\n\n\n\n\n\n\nsns.histplot(diamonds, x=\"color\", y=\"cut\", cbar=True)\n\n<AxesSubplot: xlabel='color', ylabel='cut'>\n\n\n\n\n\n\nsns.jointplot(diamonds, x=\"color\", y=\"cut\", cbar=True, kind=\"hist\")\n\n<seaborn.axisgrid.JointGrid at 0x28531a910>\n\n\n\n\n\n\ndia_sum = diamonds.groupby([\"color\", \"cut\"]).size().reset_index(name=\"count\")\n\n(\n    so.Plot(dia_sum, x=\"cut\", y=\"color\", pointsize=\"count\")\n    .add(so.Dot())\n    .scale(pointsize=(5, 20))\n)\n\n\n\n\n\ndia_sum = diamonds.groupby([\"color\", \"cut\"]).size().reset_index(name=\"count\")\n\n(\n    so.Plot(dia_sum, x=\"color\", y=\"cut\", color=\"count\")\n    .add(so.Dot(pointsize=30))\n    .scale(color=(\"deepskyblue\", \"blue\"))\n)\n\n\n\n\n\n(\n    so.Plot(diamonds, x=\"carat\", y=\"price\")\n    .add(so.Dot(alpha=.01))\n)\n\n\n\n\n\nsmaller = (\n    diamonds\n    .query('carat < 3')\n    .assign(\n        carat_cat=lambda x:pd.cut(x.carat, 30, labels=False)\n    )\n)\n\n(\n    px.box(smaller, x=\"carat_cat\", y=\"price\",\n        title=\"price vs. carat\",\n        labels={\"carat_cat\": \"carat discretized\"})\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n(\n    px.box(smaller, x=\"carat_cat\", y=\"price\")\n    .update_layout(\n        title_text=\"price vs. carat\",\n        xaxis_title=\"Carat\",\n        yaxis_title=\"Price\")\n)\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nsmaller = (\n    diamonds\n    .query('carat < 3')\n    .assign(\n        carat_cat2=lambda x:pd.qcut(x.carat, 25, labels=False)\n    )\n)\n\npx.box(smaller, x=\"carat_cat2\", y=\"price\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nsns.boxplot(smaller, x=\"carat_cat2\", y=\"price\")\n\n<AxesSubplot: xlabel='carat_cat2', ylabel='price'>\n\n\n\n\n\n\nsmaller.head()\n\n\n\n\n\n  \n    \n      \n      carat\n      cut\n      color\n      clarity\n      depth\n      table\n      price\n      x\n      y\n      z\n      carat_cat2\n    \n  \n  \n    \n      0\n      0.23\n      Ideal\n      E\n      SI2\n      61.5\n      55.0\n      326\n      3.95\n      3.98\n      2.43\n      0\n    \n    \n      1\n      0.21\n      Premium\n      E\n      SI1\n      59.8\n      61.0\n      326\n      3.89\n      3.84\n      2.31\n      0\n    \n    \n      2\n      0.23\n      Good\n      E\n      VS1\n      56.9\n      65.0\n      327\n      4.05\n      4.07\n      2.31\n      0\n    \n    \n      3\n      0.29\n      Premium\n      I\n      VS2\n      62.4\n      58.0\n      334\n      4.20\n      4.23\n      2.63\n      0\n    \n    \n      4\n      0.31\n      Good\n      J\n      SI2\n      63.3\n      58.0\n      335\n      4.34\n      4.35\n      2.75\n      1\n    \n  \n\n\n\n\n\n(\n    so.Plot(smaller, x=\"carat_cat\", y=\"price\")\n    .add(so.Dot(alpha=.01, color=\"deepskyblue\"))\n    .add(so.Range(color=\"orangered\"), so.Est(errorbar=\"sd\"))\n    .add(so.Dot(pointsize=8, color=\"orangered\"), so.Agg())\n    .add(so.Line(color=\"orangered\"), so.Agg())\n    .add(so.Line(color=\"blue\"), so.PolyFit(3))\n)\n\n# colors: https://matplotlib.org/3.1.0/gallery/color/named_colors.html\n\n\n\n\n\nsns.jointplot(diamonds, x=\"carat\", y=\"price\", kind=\"hex\")\n\n<seaborn.axisgrid.JointGrid at 0x1544d1090>\n\n\n\n\n\n\npx.density_heatmap(diamonds, x=\"carat\", y=\"price\",\n    nbinsx=20, nbinsy=20, color_continuous_scale=\"Viridis\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "contents/Untitled.html",
    "href": "contents/Untitled.html",
    "title": "class2301",
    "section": "",
    "text": "import plotly.express as px\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", color=\"smoker\", facet_col=\"sex\")\nfig.show()"
  },
  {
    "objectID": "contents/trendlines.html",
    "href": "contents/trendlines.html",
    "title": "class2301",
    "section": "",
    "text": "import pandas as pd  # for data manipulation\nimport numpy as np  # for data manipulation\nfrom sklearn.linear_model import LinearRegression  # to build a LR model for comparison\nimport plotly.graph_objects as go  # for data visualization\nimport plotly.express as px  # for data visualization\nimport statsmodels.api as sm  # to build a LOWESS model\nfrom scipy.interpolate import interp1d  # for interpolation of new data points\n\n\n# Read in data\ndf = pd.read_csv(\"data/Real estate.csv\", encoding=\"utf-8\")\n# Print Dataframe\ndf\n\n\n\n\n\n  \n    \n      \n      No\n      X1 transaction date\n      X2 house age\n      X3 distance to the nearest MRT station\n      X4 number of convenience stores\n      X5 latitude\n      X6 longitude\n      Y house price of unit area\n    \n  \n  \n    \n      0\n      1\n      2012.917\n      32.0\n      84.87882\n      10\n      24.98298\n      121.54024\n      37.9\n    \n    \n      1\n      2\n      2012.917\n      19.5\n      306.59470\n      9\n      24.98034\n      121.53951\n      42.2\n    \n    \n      2\n      3\n      2013.583\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      47.3\n    \n    \n      3\n      4\n      2013.500\n      13.3\n      561.98450\n      5\n      24.98746\n      121.54391\n      54.8\n    \n    \n      4\n      5\n      2012.833\n      5.0\n      390.56840\n      5\n      24.97937\n      121.54245\n      43.1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      409\n      410\n      2013.000\n      13.7\n      4082.01500\n      0\n      24.94155\n      121.50381\n      15.4\n    \n    \n      410\n      411\n      2012.667\n      5.6\n      90.45606\n      9\n      24.97433\n      121.54310\n      50.0\n    \n    \n      411\n      412\n      2013.250\n      18.8\n      390.96960\n      7\n      24.97923\n      121.53986\n      40.6\n    \n    \n      412\n      413\n      2013.000\n      8.1\n      104.81010\n      5\n      24.96674\n      121.54067\n      52.5\n    \n    \n      413\n      414\n      2013.500\n      6.5\n      90.45606\n      9\n      24.97433\n      121.54310\n      63.9\n    \n  \n\n414 rows × 8 columns\n\n\n\n\n# Create a scatter plot\nfig = px.scatter(\n    df,\n    x=df[\"X3 distance to the nearest MRT station\"],\n    y=df[\"Y house price of unit area\"],\n    opacity=0.8,\n    color_discrete_sequence=[\"black\"],\n)\n\n# Change chart background color\nfig.update_layout(dict(plot_bgcolor=\"white\"))\n\n# Update axes lines\nfig.update_xaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"lightgrey\",\n    zeroline=True,\n    zerolinewidth=1,\n    zerolinecolor=\"lightgrey\",\n    showline=True,\n    linewidth=1,\n    linecolor=\"black\",\n)\n\nfig.update_yaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"lightgrey\",\n    zeroline=True,\n    zerolinewidth=1,\n    zerolinecolor=\"lightgrey\",\n    showline=True,\n    linewidth=1,\n    linecolor=\"black\",\n)\n\n# Set figure title\nfig.update_layout(\n    title=dict(\n        text=\"House Price Based on Distance from the Nearest MRT\",\n        font=dict(color=\"black\"),\n    )\n)\n\n# Update marker size\nfig.update_traces(marker=dict(size=3))\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# ------- Select variables -------\n# x values for Linear Regression\nX = df[\"X3 distance to the nearest MRT station\"].values.reshape(\n    -1, 1\n)  # Note, we need X to be a 2D array, hence reshape\n# x values for LOWESS\nx = df[\"X3 distance to the nearest MRT station\"].values\n# y values for both\ny = df[\"Y house price of unit area\"].values\n\n\n# ------- Linear Regression -------\n# Define and fit the model\nmodel1 = LinearRegression()\nLR = model1.fit(X, y)\n\n# Predict a few points with Linear Regression model for the grpah\n# Create 20 evenly spaced points from smallest X to largest X\nx_range = np.linspace(X.min(), X.max(), 20)\n# Predict y values for our set of X values\ny_range = model1.predict(x_range.reshape(-1, 1))\n\n\n# ------- LOWESS -------\n# Generate y_hat values using lowess, try a couple values for hyperparameters\nlowess = sm.nonparametric.lowess\ny_hat1 = lowess(y, x)  # note, default frac=2/3\ny_hat2 = lowess(y, x, frac=1 / 5)\n\n\n\n# Create a scatter plot\nfig = px.scatter(\n    df,\n    x=df[\"X3 distance to the nearest MRT station\"],\n    y=df[\"Y house price of unit area\"],\n    opacity=0.8,\n    color_discrete_sequence=[\"black\"],\n)\n\n# Add the prediction line\nfig.add_traces(\n    go.Scatter(\n        x=x_range, y=y_range, name=\"Linear Regression\", line=dict(color=\"limegreen\")\n    )\n)\nfig.add_traces(\n    go.Scatter(\n        x=y_hat1[:, 0], y=y_hat1[:, 1], name=\"LOWESS, frac=2/3\", line=dict(color=\"red\")\n    )\n)\nfig.add_traces(\n    go.Scatter(\n        x=y_hat2[:, 0],\n        y=y_hat2[:, 1],\n        name=\"LOWESS, frac=1/5\",\n        line=dict(color=\"orange\"),\n    )\n)\n\n# Change chart background color\nfig.update_layout(dict(plot_bgcolor=\"white\"))\n\n# Update axes lines\nfig.update_xaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"lightgrey\",\n    zeroline=True,\n    zerolinewidth=1,\n    zerolinecolor=\"lightgrey\",\n    showline=True,\n    linewidth=1,\n    linecolor=\"black\",\n)\n\nfig.update_yaxes(\n    showgrid=True,\n    gridwidth=1,\n    gridcolor=\"lightgrey\",\n    zeroline=True,\n    zerolinewidth=1,\n    zerolinecolor=\"lightgrey\",\n    showline=True,\n    linewidth=1,\n    linecolor=\"black\",\n)\n\n# Set figure title\nfig.update_layout(\n    title=dict(\n        text=\"House Price Based on Distance from the Nearest MRT with Model Predictions\",\n        font=dict(color=\"black\"),\n    )\n)\n\n# Update marker size\nfig.update_traces(marker=dict(size=3))\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n# ------- Define interploation functions -------\n# Linear - draws a line between the two nearest points and calculates y value based on the slope of that line\nf_linear = interp1d(\n    y_hat1[:, 0],\n    y=y_hat1[:, 1],\n    bounds_error=False,\n    kind=\"linear\",\n    fill_value=\"extrapolate\",\n)\n# Nearest - finds the nearest available point and takes its y value\nf_nearest = interp1d(\n    y_hat1[:, 0],\n    y=y_hat1[:, 1],\n    bounds_error=False,\n    kind=\"nearest\",\n    fill_value=\"extrapolate\",\n)\n\n# Create a new set of points with x values\nxnew = [300, 600, 900, 1200, 1500, 1800, 2100, 6400]\n\n# Find y values based on the two different interpolation methods\nynew_linear = f_linear(xnew)\nynew_nearest = f_nearest(xnew)\n\n# Print results\nprint(ynew_linear)\nprint(ynew_nearest)\n\n[45.17484583 38.88067785 33.63954152 30.70005122 28.90428712 27.31620311\n 26.02059902 11.5419846 ]\n[45.02258129 38.86385487 33.43419447 31.09566559 28.91596696 27.30837281\n 26.0121316  11.55394747]"
  },
  {
    "objectID": "contents/alt_plots.html",
    "href": "contents/alt_plots.html",
    "title": "Alternative plots",
    "section": "",
    "text": "alternatives: plotly, seaborn\n\n\n\nimport plotly.express as px\n\npx.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", trendline=\"lowess\")\n\n\n                                                \n\n\n다음과 같이 smoothing parameter를 지정할 수 있음\n자세한 옵션은 여기 참조: plotly linear fits\n\n(\n    px.scatter(mpg, x=\"displ\", y=\"hwy\", color=\"drv\", \n               trendline=\"lowess\", trendline_options=dict(frac=0.3)) # smoothing parameter \n    .update_layout(width=600, height=500)\n)\n\n\n                                                \n\n\n\n(\n    px.scatter(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\",\n               trendline=\"lowess\", trendline_options=dict(frac=0.5),\n               facet_col=\"island\", # faceting\n               opacity=0.5) # alpha\n    .update_layout(width=900, height=400)\n)\n\n\n                                                \n\n\n\n\n\n\n\nsns.lmplot(mpg, x=\"displ\", y=\"hwy\", hue=\"drv\", # color대신 hue\n           lowess=True, \n           scatter_kws={\"alpha\":.5, \"s\":20}, # s: point size\n           height=3, aspect=5/3) \nplt.show() # 생략해도 무방\n\n\n\n\n\npenguins = sns.load_dataset(\"penguins\")\n\nsns.lmplot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", \n           lowess=True, \n           col=\"sex\", # faceting: col, row\n           height=3, scatter_kws={\"alpha\":.5, \"s\":5})\n\n<seaborn.axisgrid.FacetGrid at 0x12fbb6700>"
  }
]