[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "class2301 new",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\n\n\n\n“One-liner” function (actually method) definitions\n\n\n\n\n\nThis method definition uses the compact “one-liner” form, like the math notation f(x) = x + 1.\n\n\n\n\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\")\n\nfrom IPython.display import display, HTML\nHTML('<style>.output {flex-direction: row;}</style>')\n\ndf1 = penguins.describe(include=\"object\")\ndf2 = tips.describe(include=\"category\")\n\ndisplay(df1)\ndisplay(df2)\n\n\n\n\n\n\nTable 1:  Planets1 \n  \n    \n      \n      species\n      island\n      sex\n    \n  \n  \n    \n      count\n      344\n      344\n      333\n    \n    \n      unique\n      3\n      3\n      2\n    \n    \n      top\n      Adelie\n      Biscoe\n      Male\n    \n    \n      freq\n      152\n      168\n      168\n    \n  \n\n\n\n\n\n\n\nTable 2:  Planets2 \n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\ncrossref is Table 1 and Table 2\n\ngapminder datasets\nsource: kaggle\n\ngap = pd.read_csv(\"data/gapminder-tidy.csv\")\ngap.head()\n\n\n\n\n\n  \n    \n      \n      Country\n      Year\n      fertility\n      life\n      population\n      child_mortality\n      gdp\n      region\n    \n  \n  \n    \n      0\n      Afghanistan\n      1964\n      7.671\n      33.639\n      10474903.0\n      339.7\n      1182.0\n      South Asia\n    \n    \n      1\n      Afghanistan\n      1965\n      7.671\n      34.152\n      10697983.0\n      334.1\n      1182.0\n      South Asia\n    \n    \n      2\n      Afghanistan\n      1966\n      7.671\n      34.662\n      10927724.0\n      328.7\n      1168.0\n      South Asia\n    \n    \n      3\n      Afghanistan\n      1967\n      7.671\n      35.170\n      11163656.0\n      323.3\n      1173.0\n      South Asia\n    \n    \n      4\n      Afghanistan\n      1968\n      7.671\n      35.674\n      11411022.0\n      318.1\n      1187.0\n      South Asia\n    \n  \n\n\n\n\n\ndata = sm.datasets.get_rdataset(\"gapminder\", \"gapminder\")\n\n\ndata.data\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n    \n  \n  \n    \n      0\n      Afghanistan\n      Asia\n      1952\n      28.801\n      8425333\n      779.445314\n    \n    \n      1\n      Afghanistan\n      Asia\n      1957\n      30.332\n      9240934\n      820.853030\n    \n    \n      2\n      Afghanistan\n      Asia\n      1962\n      31.997\n      10267083\n      853.100710\n    \n    \n      3\n      Afghanistan\n      Asia\n      1967\n      34.020\n      11537966\n      836.197138\n    \n    \n      4\n      Afghanistan\n      Asia\n      1972\n      36.088\n      13079460\n      739.981106\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1699\n      Zimbabwe\n      Africa\n      1987\n      62.351\n      9216418\n      706.157306\n    \n    \n      1700\n      Zimbabwe\n      Africa\n      1992\n      60.377\n      10704340\n      693.420786\n    \n    \n      1701\n      Zimbabwe\n      Africa\n      1997\n      46.809\n      11404948\n      792.449960\n    \n    \n      1702\n      Zimbabwe\n      Africa\n      2002\n      39.989\n      11926563\n      672.038623\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n    \n  \n\n1704 rows × 6 columns"
  },
  {
    "objectID": "README 2.html",
    "href": "README 2.html",
    "title": "class2301",
    "section": "",
    "text": "class2301\nThis is test website"
  },
  {
    "objectID": "ch3-vis.html",
    "href": "ch3-vis.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Python의 시각화 라이브러리는 다양하게 개발되어지고 있으며, 각기 특성이 달라 하나로만 쓰기 어려운 상황임\nR의 ggplot2라는 매우 강력한 시각화 도구와 비교하면 이에 상응할 만한 Python 시각화 도구는 찾기 어려움\n\n\n\nMatplotlib\n가장 오래된 Python과 잘 통합된 널리 사용되는 라이브러리\n거의 가능한 모든 플랏을 그릴 수 있음\n한편, 디테일한 부분을 모두 specify해야 함으로써 많은 코딩이 요구되며, interactive 또는 web graphs에 취약함\npandas\nMatplotlib로 구현된 DataFrame의 method로 간략하게 시각화가 가능하며, 빠르게 데이터를 들여다볼 수 있음\nSeaborn & seaborn.objects interface\nMatplotlib 위에 개발된 간결한 문법의 high-level 언어\nDecalative: 변수들이 어떤 시각화 속성과 위치를 지니는지만 specify\n“Grammer of graphics”라는 시각화 문법에 충실하고자 seaborn.objects로 새롭게 변화 중\n\n\n\nAltair\n“Grammer of graphics”를 충실히 따라 설계됨\n각 plot이 이미지가 아닌 data + specification으로 이루어짐: 이미지가 저장되지 않고, 브라우저에서 이미지로 complie되어 생성됨\nWeb-based interactive 시각화인 D3에 그 모체를 두며, Vega/Vega-Lite로부터 파생됨\njavascript-based로 interactive 시각화에 용이하나 Python과 연계가 부족한 부분이 있고, 개발이 더딘 듯\nBokeh\nPlotly\n다양한 언어(R, Python, Julia)을 지원하며, 기업 수준의 상용화 제품들도 있으며, 지원군 많음\n\n\nJake VanderPlas의 2017년 발표 자료 중: The Python Visualization Landscape\n\nSource: Jake VanderPlas - The Python Visualization Landscape PyCon 2017"
  },
  {
    "objectID": "ch3-vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "href": "ch3-vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "title": "Data Visualization",
    "section": "탐색적 (Exploratory) vs. 정보전달 (Communicative)",
    "text": "탐색적 (Exploratory) vs. 정보전달 (Communicative)"
  },
  {
    "objectID": "ch3-vis.html#interative-plots",
    "href": "ch3-vis.html#interative-plots",
    "title": "Data Visualization",
    "section": "Interative Plots",
    "text": "Interative Plots\nAltair\n\n\n\n\n\n\n\nPlotly"
  },
  {
    "objectID": "ch3-vis.html#seaborn-website-참조",
    "href": "ch3-vis.html#seaborn-website-참조",
    "title": "Data Visualization",
    "section": "seaborn website 참조",
    "text": "seaborn website 참조\n\nseaborn.objects interface tutorial\nAPI reference link"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "class2301",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\ntips = sns.load_dataset(\"tips\")\n\nthis is markdown\n\ntips.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\npd.DataFrame"
  },
  {
    "objectID": "temp.html",
    "href": "temp.html",
    "title": "Temp",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\n# import statsmodels.api as sm\n\n\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\")\n\ndf1 = penguins.describe(include=\"object\")\ndf2 = tips.describe(include=\"category\")\n\ndf1\ndf2\n\n\n\n\n\n\nTable 1:  Planets1 \n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show(renderer=\"notebook\")\n\n\n                                                \n\n\n\ngapminder2007\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      11\n      Afghanistan\n      Asia\n      2007\n      43.828\n      31889923\n      974.580338\n      AFG\n      4\n    \n    \n      23\n      Albania\n      Europe\n      2007\n      76.423\n      3600523\n      5937.029526\n      ALB\n      8\n    \n    \n      35\n      Algeria\n      Africa\n      2007\n      72.301\n      33333216\n      6223.367465\n      DZA\n      12\n    \n    \n      47\n      Angola\n      Africa\n      2007\n      42.731\n      12420476\n      4797.231267\n      AGO\n      24\n    \n    \n      59\n      Argentina\n      Americas\n      2007\n      75.320\n      40301927\n      12779.379640\n      ARG\n      32\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1655\n      Vietnam\n      Asia\n      2007\n      74.249\n      85262356\n      2441.576404\n      VNM\n      704\n    \n    \n      1667\n      West Bank and Gaza\n      Asia\n      2007\n      73.422\n      4018332\n      3025.349798\n      PSE\n      275\n    \n    \n      1679\n      Yemen, Rep.\n      Asia\n      2007\n      62.698\n      22211743\n      2280.769906\n      YEM\n      887\n    \n    \n      1691\n      Zambia\n      Africa\n      2007\n      42.384\n      11746035\n      1271.211593\n      ZMB\n      894\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n      ZWE\n      716\n    \n  \n\n142 rows × 8 columns\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n                                                \n(a) Gapminder: 1957\n\n\n\n\n\n                                                \n(b) Gapminder: 2007\n\n\n\nFigure 1: Life Expectancy and GDP\n\n\n\n\nwdi = pd.read_csv(\"data/WDIData.csv\")\n\n\nwdi_small = wdi.iloc[:, :7]\nwdi_small = wdi_small.sample(10000)\nwdi_small[\"Indicator Name\"].value_counts()\n\nDepth of credit information index (0=low to 8=high)                                 16\nAdults (ages 15+) and children (ages 0-14) newly infected with HIV                  16\nNet financial flows, multilateral (NFL, current US$)                                15\nHouseholds and NPISHs final consumption expenditure: linked series (current LCU)    14\nEmployers, female (% of female employment) (modeled ILO estimate)                   14\n                                                                                    ..\nHouseholds and NPISHs Final consumption expenditure (current LCU)                    1\nTariff rate, most favored nation, simple mean, primary products (%)                  1\nCapture fisheries production (metric tons)                                           1\nPrevalence of undernourishment (% of population)                                     1\nNet bilateral aid flows from DAC donors, Norway (current US$)                        1\nName: Indicator Name, Length: 1437, dtype: int64"
  },
  {
    "objectID": "ch2-dataframe.html",
    "href": "ch2-dataframe.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "# numerical calculation & data frames\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\nfrom IPython.display import display, HTML\nHTML('<style>.output {flex-direction: row;}</style>')"
  },
  {
    "objectID": "ch2-dataframe.html#numpy",
    "href": "ch2-dataframe.html#numpy",
    "title": "NumPy and pandas",
    "section": "NumPy",
    "text": "NumPy\n\n수학적 symbolic 연산에 대한 구현이라고 볼 수 있으며,\n행렬(matrix) 또는 벡터(vector)를 ndarrays (n-dimensional arrays)이라는 이름으로 구현함.\n\n사실상 정수(int)나 실수(float)의 한가지 타입으로 이루어짐.\n고차원의 arrays 가능\n\nSource: Medium.com\n\n\n가령, 다음과 같은 행렬 연산이 있다면,\n\\(\\begin{bmatrix}1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{bmatrix} \\begin{bmatrix}2 \\\\ -1 \\end{bmatrix} = \\begin{bmatrix}0 \\\\ 2 \\\\ 4 \\end{bmatrix}\\)\n\n\nA = np.array([[1, 2],\n              [3, 4],\n              [5, 6]])\nX = np.array([[2],\n              [-1]])\n\nA.dot(X)  # A * X : matrix multiplication\n\narray([[0],\n       [2],\n       [4]])\n\n\n\nprint(np.array([0, 2, 4])) # 1-dim matrix: vector\nprint(np.array([0, 2, 4]).reshape(3, 1)) # 3x1 matrix\n\n[0 2 4]\n[[0]\n [2]\n [4]]\n\n\n\ns3 = np.array([0, 2, 4])\ns3.reshape(3,-1).T\n\narray([[0, 2, 4]])\n\n\n\nX2 = np.array([2, -1])\nA.dot(X2)\n\narray([0, 2, 4])\n\n\n\nprint(A.shape)\nprint(A.ndim)\nprint(A.dtype)\n\n(3, 2)\n2\nint64\n\n\n\nA + A # element-wise addition\n\narray([[ 2,  4],\n       [ 6,  8],\n       [10, 12]])\n\n\n\n2 * A - 1 # recycling rule\n\narray([[ 1,  3],\n       [ 5,  7],\n       [ 9, 11]])\n\n\n\nnp.exp(A) # element-wise\n\narray([[  2.72,   7.39],\n       [ 20.09,  54.6 ],\n       [148.41, 403.43]])\n\n\n\nPython vs. NumPy 계산\n\n2**31 + 1\n\n2147483649\n\n\n\na = np.array([2**31-1], dtype='int32')\na + 1\n\narray([-2147483648], dtype=int32)\n\n\n\n\n\n\n\n\nNumPy data types\n\n\n\n\n\nMcKinney, ch.4"
  },
  {
    "objectID": "ch2-dataframe.html#pandas-series-dataframe",
    "href": "ch2-dataframe.html#pandas-series-dataframe",
    "title": "NumPy and pandas",
    "section": "pandas : Series & DataFrame",
    "text": "pandas : Series & DataFrame\n\nSeries\n1개의 칼럼으로 이루어진 데이터 포멧 - DataFrame의 각 칼럼들을 Series로 이해할 수 있음\n\n Source: Practical Data Science\n\n\nDataFrame\n각 칼럼들이 한 가지 데이터 타입으로 이루어진 tabular형태 (2차원)의 데이터 포맷\n\n각 칼럼은 기본적으로 한 가지 데이터 타입인 것이 이상적이나, 다른 타입이 섞여 있을 수 있음\nNumPy의 2차원 array의 각 칼럼에 labels을 부여한 것으로 볼 수도 있으나, 여러 다른 기능들이 추가됨\nNumPy의 경우 고차원의 array를 다룰 수 있음: ndarray\n\n고차원의 DataFrame과 비슷한 것은 xarray가 존재\n\n\n\n\n\nndarray로부터 DataFrame을 생성\n\ndf = pd.DataFrame(A, columns=[\"A1\", \"A2\"])\ndf\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n      A2\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n    \n    \n      2\n      5\n      6\n    \n  \n\n\n\n\n\n\n\ndf.values # 또는 df.to_numpy()\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\n\nDataFrame의 칼럼: Series로 추출\n\ns = df[\"A1\"] # A1 칼럼 선택\ns\n# DataFrame의 column 이름이 Series의 name으로 전환\n\n0    1\n1    3\n2    5\nName: A1, dtype: int64\n\n\n\ntype(s)\n\npandas.core.series.Series\n\n\n\n1개의 칼럼만을 가진 DataFrame도 가능\n\ns2 = df[[\"A1\"]] # A1 칼럼 선택\ns2\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n    \n  \n  \n    \n      0\n      1\n    \n    \n      1\n      3\n    \n    \n      2\n      5\n    \n  \n\n\n\n\n\n\n\ntype(s2)\n\npandas.core.frame.DataFrame\n\n\ninsert Pandas <-> NumPy array image\n\n\n\n(참고) Mixed Data Type\n\ns = pd.Series([1, 2, \"3\"])\n\n\ns.dtype\n\ndtype('O')\n\n\n\ns + s\n\n0     2\n1     4\n2    33\ndtype: object\n\n\n\ns_int = s.astype(\"int\")\ns_int + s_int\n\n0    2\n1    4\n2    6\ndtype: int64\n\n\n\ns2 = pd.Series([1, 2, 3.1])\ns2.dtype\n\ndtype('float64')\n\n\n\ns2.astype(\"int\")\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\n\n\n\nLoading a Dataset: Tips\n\ntips = sns.load_dataset(\"tips\")\ntips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n    \n  \n\n244 rows × 7 columns\n\n\n\n\n# \ntips.values\n\narray([[16.99, 1.01, 'Female', ..., 'Sun', 'Dinner', 2],\n       [10.34, 1.66, 'Male', ..., 'Sun', 'Dinner', 3],\n       [21.01, 3.5, 'Male', ..., 'Sun', 'Dinner', 3],\n       ...,\n       [22.67, 2.0, 'Male', ..., 'Sat', 'Dinner', 2],\n       [17.82, 1.75, 'Male', ..., 'Sat', 'Dinner', 2],\n       [18.78, 3.0, 'Female', ..., 'Thur', 'Dinner', 2]], dtype=object)\n\n\n\ntips.head() # 처음 N개 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\ntips.describe() # numerical type만 나열\n\n\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244.00\n    \n    \n      mean\n      19.79\n      3.00\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      6.00\n    \n  \n\n\n\n\n\n\n\ntips.describe(include=\"all\") # all types 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244\n      244\n      244\n      244\n      244.00\n    \n    \n      unique\n      NaN\n      NaN\n      2\n      2\n      4\n      2\n      NaN\n    \n    \n      top\n      NaN\n      NaN\n      Male\n      No\n      Sat\n      Dinner\n      NaN\n    \n    \n      freq\n      NaN\n      NaN\n      157\n      151\n      87\n      176\n      NaN\n    \n    \n      mean\n      19.79\n      3.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      NaN\n      NaN\n      NaN\n      NaN\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      NaN\n      NaN\n      NaN\n      NaN\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      NaN\n      NaN\n      NaN\n      NaN\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      NaN\n      NaN\n      NaN\n      NaN\n      6.00\n    \n  \n\n\n\n\n\ntips.describe(include=\"category\")\n\n\n\n\n\n\n\n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\ns1 = tips[\"day\"].value_counts() # \"day\" 칼럼을 선택 후 각 카테고리별 counts\ns2 = tips[\"day\"].value_counts(normalize=True) # 카테고리별 비율\n\ns3 = tips[[\"sex\", \"smoker\"]].value_counts() # \"sex\", \"smoker\" 칼럼을 선택 후 유니크한 카테고리별 counts\n\n\ndisplay(s1); display(s2)\ndisplay(s3)\n\n\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n\n\nSat    0.36\nSun    0.31\nThur   0.25\nFri    0.08\nName: day, dtype: float64\n\n\n\n\nsex     smoker\nMale    No        97\n        Yes       60\nFemale  No        54\n        Yes       33\ndtype: int64\n\n\n\n\n\n\n\nLoading a Dataset: Penguins\n\npenguins = sns.load_dataset(\"penguins\")\npenguins\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.10\n      18.70\n      181.00\n      3750.00\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.50\n      17.40\n      186.00\n      3800.00\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.30\n      18.00\n      195.00\n      3250.00\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.70\n      19.30\n      193.00\n      3450.00\n      Female\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      339\n      Gentoo\n      Biscoe\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      340\n      Gentoo\n      Biscoe\n      46.80\n      14.30\n      215.00\n      4850.00\n      Female\n    \n    \n      341\n      Gentoo\n      Biscoe\n      50.40\n      15.70\n      222.00\n      5750.00\n      Male\n    \n    \n      342\n      Gentoo\n      Biscoe\n      45.20\n      14.80\n      212.00\n      5200.00\n      Female\n    \n    \n      343\n      Gentoo\n      Biscoe\n      49.90\n      16.10\n      213.00\n      5400.00\n      Male\n    \n  \n\n344 rows × 7 columns\n\n\n\n\npenguins.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\n\npenguins.describe(include=\"object\")\n\n\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      sex\n    \n  \n  \n    \n      count\n      344\n      344\n      333\n    \n    \n      unique\n      3\n      3\n      2\n    \n    \n      top\n      Adelie\n      Biscoe\n      Male\n    \n    \n      freq\n      152\n      168\n      168\n    \n  \n\n\n\n\n\n\n\npenguins[[\"island\", \"species\"]].value_counts()\n\nisland     species  \nBiscoe     Gentoo       124\nDream      Chinstrap     68\n           Adelie        56\nTorgersen  Adelie        52\nBiscoe     Adelie        44\ndtype: int64\n\n\n\ns1 = tips[\"total_bill\"]\ns2 = tips[\"tip\"]\n\npd.DataFrame([s1, s2]).T.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n    \n    \n      1\n      10.34\n      1.66\n    \n    \n      2\n      21.01\n      3.50\n    \n    \n      3\n      23.68\n      3.31\n    \n    \n      4\n      24.59\n      3.61\n    \n  \n\n\n\n\n\n\npandas Index\n\nframe1 = pd.DataFrame(np.arange(6).reshape((2, 3)),\n                     index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),\n                     columns=pd.Index([\"one\", \"two\", \"three\"], name=\"number\"))\nframe1\n\n\n\n\n\n\n\n  \n    \n      number\n      one\n      two\n      three\n    \n    \n      state\n      \n      \n      \n    \n  \n  \n    \n      Ohio\n      0\n      1\n      2\n    \n    \n      Colorado\n      3\n      4\n      5\n    \n  \n\n\n\n\n\n\n\nframe1.stack()\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64\n\n\n\nframe2 = pd.DataFrame(np.arange(12).reshape((4, 3)),\n            index=pd.MultiIndex.from_arrays([[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]], names=[\"idx1\", \"idx2\"]),\n            columns=pd.MultiIndex.from_arrays([[\"Ohio\", \"Ohio\", \"Colorado\"], [\"Green\", \"Red\", \"Green\"]], names=[\"state\", \"color\"]))\nframe2\n\n\n\n\n\n\n\n  \n    \n      \n      state\n      Ohio\n      Colorado\n    \n    \n      \n      color\n      Green\n      Red\n      Green\n    \n    \n      idx1\n      idx2\n      \n      \n      \n    \n  \n  \n    \n      a\n      1\n      0\n      1\n      2\n    \n    \n      2\n      3\n      4\n      5\n    \n    \n      b\n      1\n      6\n      7\n      8\n    \n    \n      2\n      9\n      10\n      11\n    \n  \n\n\n\n\n\n\nTime Series에 특화\n\nfb = pd.read_csv('data/fb_stock_prices_2018.csv', index_col='date', parse_dates=True)\nfb.plot(kind='line', y=['high', 'low'], figsize=(7, 4), title='Facebook Stock 2018')\nplt.show()\n\n\n\n\n\nfb.head()\n\n\n\n\n\n  \n    \n      \n      open\n      high\n      low\n      close\n      volume\n    \n    \n      date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2018-01-02\n      177.68\n      181.58\n      177.55\n      181.42\n      18151903\n    \n    \n      2018-01-03\n      181.88\n      184.78\n      181.33\n      184.67\n      16886563\n    \n    \n      2018-01-04\n      184.90\n      186.21\n      184.10\n      184.33\n      13880896\n    \n    \n      2018-01-05\n      185.59\n      186.90\n      184.93\n      186.85\n      13574535\n    \n    \n      2018-01-08\n      187.20\n      188.90\n      186.33\n      188.28\n      17994726\n    \n  \n\n\n\n\nindex없이 분석 가능?\nindex의 활용은 강의 후반부에…"
  },
  {
    "objectID": "ch2-dataframe.html#copy-vs.-view",
    "href": "ch2-dataframe.html#copy-vs.-view",
    "title": "NumPy and pandas",
    "section": "Copy vs. View",
    "text": "Copy vs. View\nrefer to Section 1.2.7\nrefer to ?@sec-visualization\nrefer to here"
  },
  {
    "objectID": "others.html",
    "href": "others.html",
    "title": "class2301",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\nwdi_data = (\n    \"https://raw.githubusercontent.com/nickeubank/\"\n    \"practicaldatascience/master/Example_Data/wdi_plotting.csv\"\n)\nworld = pd.read_csv(wdi_data)\n\nnames = world.columns[3:].to_list()\n\nnames.append(\"GDP per capita (constant 2015 US$)\")\n\ncountries = world[\"Country Code\"].unique()\n\n\nwdi = pd.read_parquet(\"data/wdi.parquet\")\nwdi2 = wdi[wdi[\"Indicator Name\"].isin(names) & wdi[\"Country Code\"].isin(countries)].copy()\n\nindic_name = wdi2[\"Indicator Name\"].unique()\n\nwdi2.columns = wdi2.columns.str.replace(\" \", \"_\")\nwdi2.rename(str.lower, axis=1, inplace=True)\n\ndic = dict(zip(indic_name, [\"CO2\", \"GDP\", \"life_exp\", \"literacy\", \"mortality\", \"child_mortality\", \"polution\", \"pop\"]))\nwdi2 = wdi2.replace({\"indicator_name\": dic})\n\nyears = wdi2.loc[:, '1960':'2021'].columns\n\nwdi2_long1 = wdi2.melt(\n    id_vars=wdi2.columns[:4], \n    value_vars=years, \n    value_name=\"values\",\n    var_name=\"year\"\n)\n\nwdi2_long1 = wdi2_long1.drop(columns=\"indicator_code\")\n\nwdi2_long2 = wdi2_long1.pivot(\n    index=[\"country_name\",  \"country_code\", \"year\"], columns=\"indicator_name\", \n    values=\"values\"\n)\n\nwdi2_long2.columns.name = \"\"\nwdi2_long2 = wdi2_long2.reset_index()\nwdi2_long2[\"year\"] = wdi2_long2.year.astype(int)\n\n\n\nindicators = wdi[\"Indicator Name\"].unique()\nindicators = pd.Series(indicators)\n\nindicators[indicators.str.contains(\"region\")]\n\n751    Merchandise exports to low- and middle-income ...\n752    Merchandise exports to low- and middle-income ...\n764    Merchandise imports from low- and middle-incom...\n765    Merchandise imports from low- and middle-incom...\ndtype: object\n\n\n\nwdi_country = pd.read_csv(\"data/WDICountry.csv\")\n\nwdi2_long2 = wdi2_long2.merge(wdi_country[[\"Country Code\", \"Short Name\", \"Region\"]], left_on=\"country_code\", right_on=\"Country Code\", how=\"left\")\n\nwdi2_long2.drop(columns=[\"Country Code\"], inplace=True)\n\nwdi2_long2.rename(columns={\"Region\": \"region\", \"Short Name\": \"country\"}, inplace=True)\n\n\nwdi2_long2.region.value_counts(dropna=False)\n\nEurope & Central Asia         3596\nSub-Saharan Africa            2976\nLatin America & Caribbean     2604\nEast Asia & Pacific           2294\nMiddle East & North Africa    1302\nSouth Asia                     496\nNorth America                  186\nName: region, dtype: int64\n\n\n\nwdi_2020 = wdi2_long2.query('year == 2020')\n\nwdi_2020 = wdi_2020.assign(\n    log_gdp = lambda x: np.log(x.GDP),\n    log_child_mortality = lambda x: np.log(x.child_mortality),\n)\n\n\nbig_countries = wdi_2020.nlargest(10, \"pop\")[\"country\"]\nidx = wdi_2020[\"country\"].isin(big_countries)\nwdi_2020_big = wdi_2020[idx]\n\n\n(\n    so.Plot(wdi_2020, x=\"log_gdp\", y=\"child_mortality\")\n    .add(so.Dot(edgecolor=\"white\", alpha=.5), pointsize=\"pop\", color=\"region\")\n    .scale(pointsize=(6, 50), color=\"Set2\")\n    .layout(size=(8, 8))\n    .add(so.Text(halign=\"left\", offset=20), \n         x=wdi_2020_big.log_gdp, \n         y=wdi_2020_big.child_mortality, \n         text=wdi_2020_big.country)\n)\n\n\n\n\n\nwdi_2020_2 = wdi_2020.dropna(subset=[\"log_gdp\", \"log_child_mortality\", \"pop\"])\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\nfig = px.scatter(wdi_2020_2, \n                 x=\"log_gdp\", y=\"child_mortality\", \n                 size=\"pop\", size_max=40,\n                 hover_name=\"country_name\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nwdi_2020.head()\n\n\n\n\n\n  \n    \n      \n      country_name\n      country_code\n      year\n      CO2\n      GDP\n      child_mortality\n      life_exp\n      literacy\n      mortality\n      polution\n      pop\n      country\n      region\n      log_gdp\n      log_child_mortality\n    \n  \n  \n    \n      60\n      Afghanistan\n      AFG\n      2020\n      NaN\n      553.036479\n      58.0\n      62.575\n      NaN\n      NaN\n      NaN\n      38972230.0\n      Afghanistan\n      South Asia\n      6.315424\n      4.060443\n    \n    \n      122\n      Albania\n      ALB\n      2020\n      NaN\n      4410.455165\n      9.8\n      76.989\n      NaN\n      NaN\n      NaN\n      2837849.0\n      Albania\n      Europe & Central Asia\n      8.391733\n      2.282382\n    \n    \n      184\n      Algeria\n      DZA\n      2020\n      NaN\n      3873.510015\n      22.7\n      74.453\n      NaN\n      NaN\n      NaN\n      43451666.0\n      Algeria\n      Middle East & North Africa\n      8.261916\n      3.122365\n    \n    \n      246\n      American Samoa\n      ASM\n      2020\n      NaN\n      14303.627033\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      46189.0\n      American Samoa\n      East Asia & Pacific\n      9.568268\n      NaN\n    \n    \n      308\n      Andorra\n      AND\n      2020\n      NaN\n      34394.277553\n      2.5\n      NaN\n      NaN\n      NaN\n      NaN\n      77700.0\n      Andorra\n      Europe & Central Asia\n      10.445645\n      0.916291"
  },
  {
    "objectID": "ch1-setup.html",
    "href": "ch1-setup.html",
    "title": "환경설정",
    "section": "",
    "text": "Conda Cheatsheet: 기본적인 conda 명령어 요약\n\n\nAnaconda보다는 기본 패키지들이 미리 설치되지 않는 miniconda를 추천: miniconda install page\n\nWindows 경우: 설치시 물어보는 “add Miniconda to your PATH variable” 옵션을 켜고 설치할 것\n\nShell 사용에 대해서는 아래 3. Command Line Tool 참고\n\n# Terminal (Mac) or Miniconda Powershell Prompt (Windows)\n\n#> conda info # 콘다 정보 \n#> conda update conda # 콘다 업데이트\n\n\n\n\nconda managing channels\n다음을 통해 .condarc 환경파일에 configuration 추가\n\n#> conda config --add channels conda-forge\n#> conda config --set channel_priority strict  # 다른 채널 검색 안함\n\nPython update\n\n#> conda install python=3.10  # python update\n\n\n\n\nuser guide\n환경 생성: miniconda에서 자체 제공하는 가상환경으로 다른 가상환경 툴인 pyenv나 venv 사용하지 않음\n\n#$ conda create --name myenv\n\n# 특정 버전의 파이썬 설치시\n#$ conda create --name myenv python=3.9\n\n환경 확인\n\n#$ conda env list\n\n#> conda environments:\n#>  base         */.../miniconda3\n#>                /.../miniconda3/envs/myenv\n\n환경 제거\n\n#> conda env remove --name myenv\n\n환경 activate/deactivate\n\n#> conda activate myenv\n#> conda deactivate  # activated 환경 내에서\n\n\n\n\n\n# 특정 환경을 activate한 후\n#> conda install <package name1> <package name2> ...\n#> conda install --channel conda-forge <package name> # 특정 conda-forge 채널을 통한 설치\n\n# 제거\n#> conda remove <package name1> <package name2> ...\n\n# update\n#> conda update <package name1> <package name2> ...\n#> conda update --all # all packages\n\n# 패키지 리스트\n#> conda list\n\n\n# pip을  이용한  패키지 설치: conda repository에 없는 패키지들을 설치하는 경우. 충돌의 우려 있음\n#> pip install <package name1> <package name2> ...\n\n\n# 수업에 필요한 기본 패키지 설치\n#> conda install jupyter numpy pandas matplotlib seaborn"
  },
  {
    "objectID": "ch1-setup.html#vs-code-설치",
    "href": "ch1-setup.html#vs-code-설치",
    "title": "환경설정",
    "section": "VS Code 설치",
    "text": "VS Code 설치\n개인마다 선호하는 text editor가 있으나 본 수업에서는 VS Code로 진행: download and install here"
  },
  {
    "objectID": "ch1-setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "href": "ch1-setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "title": "환경설정",
    "section": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천",
    "text": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천\nOh-My-Zsh!: 링크\n\n이 경우 miniconda 설치시 bash의 추가된 conda setup을 zsh로 가져와야 함: minconda를 zsh 설치 후에 설치하는 경우는 miniconda가 추가시키니 신경쓸 필요 없음\n\nhome directory에 있는 .bash_profile 을 열면 # >>> conda initialize >>> 로 시작해서 # <<< conda initialize <<< 부분까지를 복사한 후 .zshrc 파일을 열어 맨 뒤에 붙여넣음\n위 파일을 VS Code에서 쉽게 열어보려면 아래 그림처럼 VS Code에서 Sehll Command: Install 'Code' command in PATH 실행하고 나면\nshell 환경에서 code .zshrc를 실행하면 VS Code에서 편집할 수 있음"
  },
  {
    "objectID": "ch1-setup.html#windows의-경우-windows-terminal-추천",
    "href": "ch1-setup.html#windows의-경우-windows-terminal-추천",
    "title": "환경설정",
    "section": "Windows의 경우: Windows Terminal 추천",
    "text": "Windows의 경우: Windows Terminal 추천\n\n설치 링크는 구글링…\n명령프롬프트(CMD) vs. Powershell\nPowershell에서 conda를 사용하기 위해서는 몇 가지 설정 필요: 블로그 링크"
  },
  {
    "objectID": "ch1-setup.html#extensions",
    "href": "ch1-setup.html#extensions",
    "title": "환경설정",
    "section": "Extensions",
    "text": "Extensions\n\nPython\nDocs View\nPython Environment Manager"
  },
  {
    "objectID": "ch1-setup.html#preferences",
    "href": "ch1-setup.html#preferences",
    "title": "환경설정",
    "section": "Preferences",
    "text": "Preferences\n\nthemes\nfont, font size (notebook, results)\n\nundo: cell 안과 밖\nvariables viewer, data viewer"
  },
  {
    "objectID": "ch3-vis.html#bertins-semiology-of-graphics-1967",
    "href": "ch3-vis.html#bertins-semiology-of-graphics-1967",
    "title": "Data Visualization",
    "section": "Bertin’s Semiology of Graphics (1967)",
    "text": "Bertin’s Semiology of Graphics (1967)"
  },
  {
    "objectID": "ch3-vis.html#the-grammer-of-graphics",
    "href": "ch3-vis.html#the-grammer-of-graphics",
    "title": "Data Visualization",
    "section": "The Grammer of Graphics",
    "text": "The Grammer of Graphics\na coherent system for describing and building graphs\nFundamentals of Data Visualization by Claus O. Wilke\nAesthetics and types of data"
  },
  {
    "objectID": "contents/resources.html",
    "href": "contents/resources.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\n\n\n\n\n\n“One-liner” function (actually method) definitions\n\n\n\n\n\nThis method definition uses the compact “one-liner” form, like the math notation f(x) = x + 1.\n\n\n\n\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\")\n\nfrom IPython.display import display, HTML\nHTML('<style>.output {flex-direction: row;}</style>')\n\ndf1 = penguins.describe(include=\"object\")\ndf2 = tips.describe(include=\"category\")\n\ndisplay(df1)\ndisplay(df2)\n\n\n\n\n\n\nTable 1:  Planets1 \n  \n    \n      \n      species\n      island\n      sex\n    \n  \n  \n    \n      count\n      344\n      344\n      333\n    \n    \n      unique\n      3\n      3\n      2\n    \n    \n      top\n      Adelie\n      Biscoe\n      Male\n    \n    \n      freq\n      152\n      168\n      168\n    \n  \n\n\n\n\n\n\n\nTable 2:  Planets2 \n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\ncrossref is Table 1 and Table 2\n\ngapminder datasets\nsource: kaggle\n\ngap = pd.read_csv(\"data/gapminder-tidy.csv\")\ngap.head()\n\n\n\n\n\n  \n    \n      \n      Country\n      Year\n      fertility\n      life\n      population\n      child_mortality\n      gdp\n      region\n    \n  \n  \n    \n      0\n      Afghanistan\n      1964\n      7.671\n      33.639\n      10474903.0\n      339.7\n      1182.0\n      South Asia\n    \n    \n      1\n      Afghanistan\n      1965\n      7.671\n      34.152\n      10697983.0\n      334.1\n      1182.0\n      South Asia\n    \n    \n      2\n      Afghanistan\n      1966\n      7.671\n      34.662\n      10927724.0\n      328.7\n      1168.0\n      South Asia\n    \n    \n      3\n      Afghanistan\n      1967\n      7.671\n      35.170\n      11163656.0\n      323.3\n      1173.0\n      South Asia\n    \n    \n      4\n      Afghanistan\n      1968\n      7.671\n      35.674\n      11411022.0\n      318.1\n      1187.0\n      South Asia\n    \n  \n\n\n\n\n\ndata = sm.datasets.get_rdataset(\"gapminder\", \"gapminder\")\n\n\ndata.data\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n    \n  \n  \n    \n      0\n      Afghanistan\n      Asia\n      1952\n      28.801\n      8425333\n      779.445314\n    \n    \n      1\n      Afghanistan\n      Asia\n      1957\n      30.332\n      9240934\n      820.853030\n    \n    \n      2\n      Afghanistan\n      Asia\n      1962\n      31.997\n      10267083\n      853.100710\n    \n    \n      3\n      Afghanistan\n      Asia\n      1967\n      34.020\n      11537966\n      836.197138\n    \n    \n      4\n      Afghanistan\n      Asia\n      1972\n      36.088\n      13079460\n      739.981106\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1699\n      Zimbabwe\n      Africa\n      1987\n      62.351\n      9216418\n      706.157306\n    \n    \n      1700\n      Zimbabwe\n      Africa\n      1992\n      60.377\n      10704340\n      693.420786\n    \n    \n      1701\n      Zimbabwe\n      Africa\n      1997\n      46.809\n      11404948\n      792.449960\n    \n    \n      1702\n      Zimbabwe\n      Africa\n      2002\n      39.989\n      11926563\n      672.038623\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n    \n  \n\n1704 rows × 6 columns"
  },
  {
    "objectID": "contents/setup.html",
    "href": "contents/setup.html",
    "title": "환경설정",
    "section": "",
    "text": "Conda Cheatsheet: 기본적인 conda 명령어 요약\n\n\nAnaconda보다는 기본 패키지들이 미리 설치되지 않는 miniconda를 추천: miniconda install page\n\nWindows 경우: 설치시 물어보는 “add Miniconda to your PATH variable” 옵션을 켜고 설치할 것\n\nShell 사용에 대해서는 아래 3. Command Line Tool 참고\n\n# Terminal (Mac) or Miniconda Powershell Prompt (Windows)\n\n#> conda info # 콘다 정보 \n#> conda update conda # 콘다 업데이트\n\n\n\n\nconda managing channels\n다음을 통해 .condarc 환경파일에 configuration 추가\n\n#> conda config --add channels conda-forge\n#> conda config --set channel_priority strict  # 다른 채널 검색 안함\n\nPython update\n\n#> conda install python=3.10  # python update\n\n\n\n\nuser guide\n환경 생성: miniconda에서 자체 제공하는 가상환경으로 다른 가상환경 툴인 pyenv나 venv 사용하지 않음\n\n#$ conda create --name myenv\n\n# 특정 버전의 파이썬 설치시\n#$ conda create --name myenv python=3.9\n\n환경 확인\n\n#$ conda env list\n\n#> conda environments:\n#>  base         */.../miniconda3\n#>                /.../miniconda3/envs/myenv\n\n환경 제거\n\n#> conda env remove --name myenv\n\n환경 activate/deactivate\n\n#> conda activate myenv\n#> conda deactivate  # activated 환경 내에서\n\n\n\n\n\n# 특정 환경을 activate한 후\n#> conda install <package name1> <package name2> ...\n#> conda install --channel conda-forge <package name> # 특정 conda-forge 채널을 통한 설치\n\n# 제거\n#> conda remove <package name1> <package name2> ...\n\n# update\n#> conda update <package name1> <package name2> ...\n#> conda update --all # all packages\n\n# 패키지 리스트\n#> conda list\n\n\n# pip을  이용한  패키지 설치: conda repository에 없는 패키지들을 설치하는 경우. 충돌의 우려 있음\n#> pip install <package name1> <package name2> ...\n\n\n# 수업에 필요한 기본 패키지 설치\n#> conda install jupyter numpy pandas matplotlib seaborn"
  },
  {
    "objectID": "contents/setup.html#vs-code-설치",
    "href": "contents/setup.html#vs-code-설치",
    "title": "환경설정",
    "section": "VS Code 설치",
    "text": "VS Code 설치\n개인마다 선호하는 text editor가 있으나 본 수업에서는 VS Code로 진행: download and install here"
  },
  {
    "objectID": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "href": "contents/setup.html#mac의-경우-기본-bash-shell인-terminal-대신-다음-zsh을-추천",
    "title": "환경설정",
    "section": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천",
    "text": "Mac의 경우: 기본 bash shell인 terminal 대신 다음 zsh을 추천\nOh-My-Zsh!: 링크\n\n이 경우 miniconda 설치시 bash의 추가된 conda setup을 zsh로 가져와야 함: minconda를 zsh 설치 후에 설치하는 경우는 miniconda가 추가시키니 신경쓸 필요 없음\n\nhome directory에 있는 .bash_profile 을 열면 # >>> conda initialize >>> 로 시작해서 # <<< conda initialize <<< 부분까지를 복사한 후 .zshrc 파일을 열어 맨 뒤에 붙여넣음\n위 파일을 VS Code에서 쉽게 열어보려면 아래 그림처럼 VS Code에서 Sehll Command: Install 'Code' command in PATH 실행하고 나면\nshell 환경에서 code .zshrc를 실행하면 VS Code에서 편집할 수 있음"
  },
  {
    "objectID": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "href": "contents/setup.html#windows의-경우-windows-terminal-추천",
    "title": "환경설정",
    "section": "Windows의 경우: Windows Terminal 추천",
    "text": "Windows의 경우: Windows Terminal 추천\n\n설치 링크는 구글링…\n명령프롬프트(CMD) vs. Powershell\nPowershell에서 conda를 사용하기 위해서는 몇 가지 설정 필요: 블로그 링크"
  },
  {
    "objectID": "contents/setup.html#extensions",
    "href": "contents/setup.html#extensions",
    "title": "환경설정",
    "section": "Extensions",
    "text": "Extensions\n\nPython\nDocs View\nPython Environment Manager"
  },
  {
    "objectID": "contents/setup.html#preferences",
    "href": "contents/setup.html#preferences",
    "title": "환경설정",
    "section": "Preferences",
    "text": "Preferences\n\nthemes\nfont, font size (notebook, results)\n\nundo: cell 안과 밖\nvariables viewer, data viewer"
  },
  {
    "objectID": "contents/temp.html",
    "href": "contents/temp.html",
    "title": "Temp",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\n# import statsmodels.api as sm\n\n\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\")\n\ndf1 = penguins.describe(include=\"object\")\ndf2 = tips.describe(include=\"category\")\n\ndf1\ndf2\n\n\n\n\n\n\nTable 1:  Planets1 \n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show(renderer=\"notebook\")\n\n\n                                                \n\n\n\ngapminder2007\n\n\n\n\n\n  \n    \n      \n      country\n      continent\n      year\n      lifeExp\n      pop\n      gdpPercap\n      iso_alpha\n      iso_num\n    \n  \n  \n    \n      11\n      Afghanistan\n      Asia\n      2007\n      43.828\n      31889923\n      974.580338\n      AFG\n      4\n    \n    \n      23\n      Albania\n      Europe\n      2007\n      76.423\n      3600523\n      5937.029526\n      ALB\n      8\n    \n    \n      35\n      Algeria\n      Africa\n      2007\n      72.301\n      33333216\n      6223.367465\n      DZA\n      12\n    \n    \n      47\n      Angola\n      Africa\n      2007\n      42.731\n      12420476\n      4797.231267\n      AGO\n      24\n    \n    \n      59\n      Argentina\n      Americas\n      2007\n      75.320\n      40301927\n      12779.379640\n      ARG\n      32\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1655\n      Vietnam\n      Asia\n      2007\n      74.249\n      85262356\n      2441.576404\n      VNM\n      704\n    \n    \n      1667\n      West Bank and Gaza\n      Asia\n      2007\n      73.422\n      4018332\n      3025.349798\n      PSE\n      275\n    \n    \n      1679\n      Yemen, Rep.\n      Asia\n      2007\n      62.698\n      22211743\n      2280.769906\n      YEM\n      887\n    \n    \n      1691\n      Zambia\n      Africa\n      2007\n      42.384\n      11746035\n      1271.211593\n      ZMB\n      894\n    \n    \n      1703\n      Zimbabwe\n      Africa\n      2007\n      43.487\n      12311143\n      469.709298\n      ZWE\n      716\n    \n  \n\n142 rows × 8 columns\n\n\n\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ndef gapminder_plot(year):\n    gapminderYear = gapminder.query(\"year == \" + \n                                    str(year))\n    fig = px.scatter(gapminderYear, \n                     x=\"gdpPercap\", y=\"lifeExp\",\n                     size=\"pop\", size_max=60,\n                     hover_name=\"country\")\n    fig.show()\n    \ngapminder_plot(1957)\ngapminder_plot(2007)\n\n\n\n\n\n\n                                                \n(a) Gapminder: 1957\n\n\n\n\n\n                                                \n(b) Gapminder: 2007\n\n\n\nFigure 1: Life Expectancy and GDP\n\n\n\n\nwdi = pd.read_csv(\"data/WDIData.csv\")\n\n\nwdi_small = wdi.iloc[:, :7]\nwdi_small = wdi_small.sample(10000)\nwdi_small[\"Indicator Name\"].value_counts()\n\nDepth of credit information index (0=low to 8=high)                                 16\nAdults (ages 15+) and children (ages 0-14) newly infected with HIV                  16\nNet financial flows, multilateral (NFL, current US$)                                15\nHouseholds and NPISHs final consumption expenditure: linked series (current LCU)    14\nEmployers, female (% of female employment) (modeled ILO estimate)                   14\n                                                                                    ..\nHouseholds and NPISHs Final consumption expenditure (current LCU)                    1\nTariff rate, most favored nation, simple mean, primary products (%)                  1\nCapture fisheries production (metric tons)                                           1\nPrevalence of undernourishment (% of population)                                     1\nNet bilateral aid flows from DAC donors, Norway (current US$)                        1\nName: Indicator Name, Length: 1437, dtype: int64"
  },
  {
    "objectID": "contents/vis.html",
    "href": "contents/vis.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Python의 시각화 라이브러리는 다양하게 개발되어지고 있으며, 각기 특성이 달라 하나로만 쓰기 어려운 상황임\nR의 ggplot2라는 매우 강력한 시각화 도구와 비교하면 이에 상응할 만한 Python 시각화 도구는 찾기 어려움\n\n\n\nMatplotlib\n가장 오래된 Python과 잘 통합된 널리 사용되는 라이브러리\n거의 가능한 모든 플랏을 그릴 수 있음\n한편, 디테일한 부분을 모두 specify해야 함으로써 많은 코딩이 요구되며, interactive 또는 web graphs에 취약함\npandas\nMatplotlib로 구현된 DataFrame의 method로 간략하게 시각화가 가능하며, 빠르게 데이터를 들여다볼 수 있음\nSeaborn & seaborn.objects interface\nMatplotlib 위에 개발된 간결한 문법의 high-level 언어\nDecalative: 변수들이 어떤 시각화 속성과 위치를 지니는지만 specify\n“Grammer of graphics”라는 시각화 문법에 충실하고자 seaborn.objects로 새롭게 변화 중\n\n\n\nAltair\n“Grammer of graphics”를 충실히 따라 설계됨\n각 plot이 이미지가 아닌 data + specification으로 이루어짐: 이미지가 저장되지 않고, 브라우저에서 이미지로 complie되어 생성됨\nWeb-based interactive 시각화인 D3에 그 모체를 두며, Vega/Vega-Lite로부터 파생됨\njavascript-based로 interactive 시각화에 용이하나 Python과 연계가 부족한 부분이 있고, 개발이 더딘 듯\nBokeh\nPlotly\n다양한 언어(R, Python, Julia)을 지원하며, 기업 수준의 상용화 제품들도 있으며, 지원군 많음\n\n\nJake VanderPlas의 2017년 발표 자료 중: The Python Visualization Landscape\n\nSource: Jake VanderPlas - The Python Visualization Landscape PyCon 2017"
  },
  {
    "objectID": "contents/vis.html#bertins-semiology-of-graphics-1967",
    "href": "contents/vis.html#bertins-semiology-of-graphics-1967",
    "title": "Data Visualization",
    "section": "Bertin’s Semiology of Graphics (1967)",
    "text": "Bertin’s Semiology of Graphics (1967)"
  },
  {
    "objectID": "contents/vis.html#the-grammer-of-graphics",
    "href": "contents/vis.html#the-grammer-of-graphics",
    "title": "Data Visualization",
    "section": "The Grammer of Graphics",
    "text": "The Grammer of Graphics\na coherent system for describing and building graphs\nFundamentals of Data Visualization by Claus O. Wilke\nAesthetics and types of data"
  },
  {
    "objectID": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "href": "contents/vis.html#탐색적-exploratory-vs.-정보전달-communicative",
    "title": "Data Visualization",
    "section": "탐색적 (Exploratory) vs. 정보전달 (Communicative)",
    "text": "탐색적 (Exploratory) vs. 정보전달 (Communicative)"
  },
  {
    "objectID": "contents/vis.html#interative-plots",
    "href": "contents/vis.html#interative-plots",
    "title": "Data Visualization",
    "section": "Interative Plots",
    "text": "Interative Plots\nAltair\n\n\n\n\n\n\n\nPlotly"
  },
  {
    "objectID": "contents/vis.html#seaborn-website-참조",
    "href": "contents/vis.html#seaborn-website-참조",
    "title": "Data Visualization",
    "section": "seaborn website 참조",
    "text": "seaborn website 참조\n\nseaborn.objects interface tutorial\nAPI reference link"
  },
  {
    "objectID": "contents/pandas.html",
    "href": "contents/pandas.html",
    "title": "NumPy and pandas",
    "section": "",
    "text": "refer to Section 1.2.7\nrefer to ?@sec-vscode\nrefer to here"
  },
  {
    "objectID": "contents/pandas.html#numpy",
    "href": "contents/pandas.html#numpy",
    "title": "NumPy and pandas",
    "section": "NumPy",
    "text": "NumPy\n\n수학적 symbolic 연산에 대한 구현이라고 볼 수 있으며,\n행렬(matrix) 또는 벡터(vector)를 ndarrays (n-dimensional arrays)이라는 이름으로 구현함.\n\n사실상 정수(int)나 실수(float)의 한가지 타입으로 이루어짐.\n고차원의 arrays 가능\n\nSource: Medium.com\n\n\n가령, 다음과 같은 행렬 연산이 있다면,\n\\(\\begin{bmatrix}1 & 2 \\\\ 3 & 4 \\\\ 5 & 6 \\end{bmatrix} \\begin{bmatrix}2 \\\\ -1 \\end{bmatrix} = \\begin{bmatrix}0 \\\\ 2 \\\\ 4 \\end{bmatrix}\\)\n\n\nA = np.array([[1, 2],\n              [3, 4],\n              [5, 6]])\nX = np.array([[2],\n              [-1]])\n\nA.dot(X)  # A * X : matrix multiplication\n\narray([[0],\n       [2],\n       [4]])\n\n\n\nprint(np.array([0, 2, 4])) # 1-dim matrix: vector\nprint(np.array([0, 2, 4]).reshape(3, 1)) # 3x1 matrix\n\n[0 2 4]\n[[0]\n [2]\n [4]]\n\n\n\ns3 = np.array([0, 2, 4])\ns3.reshape(3,-1).T\n\narray([[0, 2, 4]])\n\n\n\nX2 = np.array([2, -1])\nA.dot(X2)\n\narray([0, 2, 4])\n\n\n\nprint(A.shape)\nprint(A.ndim)\nprint(A.dtype)\n\n(3, 2)\n2\nint64\n\n\n\nA + A # element-wise addition\n\narray([[ 2,  4],\n       [ 6,  8],\n       [10, 12]])\n\n\n\n2 * A - 1 # recycling rule\n\narray([[ 1,  3],\n       [ 5,  7],\n       [ 9, 11]])\n\n\n\nnp.exp(A) # element-wise\n\narray([[  2.72,   7.39],\n       [ 20.09,  54.6 ],\n       [148.41, 403.43]])\n\n\n\nPython vs. NumPy 계산\n\n2**31 + 1\n\n2147483649\n\n\n\na = np.array([2**31-1], dtype='int32')\na + 1\n\narray([-2147483648], dtype=int32)\n\n\n\n\n\n\n\n\nNumPy data types\n\n\n\n\n\nMcKinney, ch.4"
  },
  {
    "objectID": "contents/pandas.html#pandas-series-dataframe",
    "href": "contents/pandas.html#pandas-series-dataframe",
    "title": "NumPy and pandas",
    "section": "pandas : Series & DataFrame",
    "text": "pandas : Series & DataFrame\n\nSeries\n1개의 칼럼으로 이루어진 데이터 포멧 - DataFrame의 각 칼럼들을 Series로 이해할 수 있음\n\n Source: Practical Data Science\n\n\nDataFrame\n각 칼럼들이 한 가지 데이터 타입으로 이루어진 tabular형태 (2차원)의 데이터 포맷\n\n각 칼럼은 기본적으로 한 가지 데이터 타입인 것이 이상적이나, 다른 타입이 섞여 있을 수 있음\nNumPy의 2차원 array의 각 칼럼에 labels을 부여한 것으로 볼 수도 있으나, 여러 다른 기능들이 추가됨\nNumPy의 경우 고차원의 array를 다룰 수 있음: ndarray\n\n고차원의 DataFrame과 비슷한 것은 xarray가 존재\n\n\n\n\n\nndarray로부터 DataFrame을 생성\n\ndf = pd.DataFrame(A, columns=[\"A1\", \"A2\"])\ndf\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n      A2\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      3\n      4\n    \n    \n      2\n      5\n      6\n    \n  \n\n\n\n\n\n\n\ndf.values # 또는 df.to_numpy()\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\ntype(df)\n\npandas.core.frame.DataFrame\n\n\n\n\nDataFrame의 칼럼: Series로 추출\n\ns = df[\"A1\"] # A1 칼럼 선택\ns\n# DataFrame의 column 이름이 Series의 name으로 전환\n\n0    1\n1    3\n2    5\nName: A1, dtype: int64\n\n\n\ntype(s)\n\npandas.core.series.Series\n\n\n\n1개의 칼럼만을 가진 DataFrame도 가능\n\ns2 = df[[\"A1\"]] # A1 칼럼 선택\ns2\n\n\n\n\n\n\n\n  \n    \n      \n      A1\n    \n  \n  \n    \n      0\n      1\n    \n    \n      1\n      3\n    \n    \n      2\n      5\n    \n  \n\n\n\n\n\n\n\ntype(s2)\n\npandas.core.frame.DataFrame\n\n\ninsert Pandas <-> NumPy array image\n\n\n\n(참고) Mixed Data Type\n\ns = pd.Series([1, 2, \"3\"])\n\n\ns.dtype\n\ndtype('O')\n\n\n\ns + s\n\n0     2\n1     4\n2    33\ndtype: object\n\n\n\ns_int = s.astype(\"int\")\ns_int + s_int\n\n0    2\n1    4\n2    6\ndtype: int64\n\n\n\ns2 = pd.Series([1, 2, 3.1])\ns2.dtype\n\ndtype('float64')\n\n\n\ns2.astype(\"int\")\n\n0    1\n1    2\n2    3\ndtype: int64\n\n\n\n\n\n\nLoading a Dataset: Tips\n\ntips = sns.load_dataset(\"tips\")\ntips\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      239\n      29.03\n      5.92\n      Male\n      No\n      Sat\n      Dinner\n      3\n    \n    \n      240\n      27.18\n      2.00\n      Female\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      241\n      22.67\n      2.00\n      Male\n      Yes\n      Sat\n      Dinner\n      2\n    \n    \n      242\n      17.82\n      1.75\n      Male\n      No\n      Sat\n      Dinner\n      2\n    \n    \n      243\n      18.78\n      3.00\n      Female\n      No\n      Thur\n      Dinner\n      2\n    \n  \n\n244 rows × 7 columns\n\n\n\n\n# \ntips.values\n\narray([[16.99, 1.01, 'Female', ..., 'Sun', 'Dinner', 2],\n       [10.34, 1.66, 'Male', ..., 'Sun', 'Dinner', 3],\n       [21.01, 3.5, 'Male', ..., 'Sun', 'Dinner', 3],\n       ...,\n       [22.67, 2.0, 'Male', ..., 'Sat', 'Dinner', 2],\n       [17.82, 1.75, 'Male', ..., 'Sat', 'Dinner', 2],\n       [18.78, 3.0, 'Female', ..., 'Thur', 'Dinner', 2]], dtype=object)\n\n\n\ntips.head() # 처음 N개 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n    \n  \n\n\n\n\n\ntips.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   total_bill  244 non-null    float64 \n 1   tip         244 non-null    float64 \n 2   sex         244 non-null    category\n 3   smoker      244 non-null    category\n 4   day         244 non-null    category\n 5   time        244 non-null    category\n 6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n\n\n\ntips.describe() # numerical type만 나열\n\n\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244.00\n    \n    \n      mean\n      19.79\n      3.00\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      6.00\n    \n  \n\n\n\n\n\n\n\ntips.describe(include=\"all\") # all types 나열\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n    \n  \n  \n    \n      count\n      244.00\n      244.00\n      244\n      244\n      244\n      244\n      244.00\n    \n    \n      unique\n      NaN\n      NaN\n      2\n      2\n      4\n      2\n      NaN\n    \n    \n      top\n      NaN\n      NaN\n      Male\n      No\n      Sat\n      Dinner\n      NaN\n    \n    \n      freq\n      NaN\n      NaN\n      157\n      151\n      87\n      176\n      NaN\n    \n    \n      mean\n      19.79\n      3.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.57\n    \n    \n      std\n      8.90\n      1.38\n      NaN\n      NaN\n      NaN\n      NaN\n      0.95\n    \n    \n      min\n      3.07\n      1.00\n      NaN\n      NaN\n      NaN\n      NaN\n      1.00\n    \n    \n      25%\n      13.35\n      2.00\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      50%\n      17.80\n      2.90\n      NaN\n      NaN\n      NaN\n      NaN\n      2.00\n    \n    \n      75%\n      24.13\n      3.56\n      NaN\n      NaN\n      NaN\n      NaN\n      3.00\n    \n    \n      max\n      50.81\n      10.00\n      NaN\n      NaN\n      NaN\n      NaN\n      6.00\n    \n  \n\n\n\n\n\ntips.describe(include=\"category\")\n\n\n\n\n\n\n\n  \n    \n      \n      sex\n      smoker\n      day\n      time\n    \n  \n  \n    \n      count\n      244\n      244\n      244\n      244\n    \n    \n      unique\n      2\n      2\n      4\n      2\n    \n    \n      top\n      Male\n      No\n      Sat\n      Dinner\n    \n    \n      freq\n      157\n      151\n      87\n      176\n    \n  \n\n\n\n\n\n\n\ns1 = tips[\"day\"].value_counts() # \"day\" 칼럼을 선택 후 각 카테고리별 counts\ns2 = tips[\"day\"].value_counts(normalize=True) # 카테고리별 비율\n\ns3 = tips[[\"sex\", \"smoker\"]].value_counts() # \"sex\", \"smoker\" 칼럼을 선택 후 유니크한 카테고리별 counts\n\n\ndisplay(s1); display(s2)\ndisplay(s3)\n\n\n\nSat     87\nSun     76\nThur    62\nFri     19\nName: day, dtype: int64\n\n\nSat    0.36\nSun    0.31\nThur   0.25\nFri    0.08\nName: day, dtype: float64\n\n\n\n\nsex     smoker\nMale    No        97\n        Yes       60\nFemale  No        54\n        Yes       33\ndtype: int64\n\n\n\n\n\n\n\nLoading a Dataset: Penguins\n\npenguins = sns.load_dataset(\"penguins\")\npenguins\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      bill_length_mm\n      bill_depth_mm\n      flipper_length_mm\n      body_mass_g\n      sex\n    \n  \n  \n    \n      0\n      Adelie\n      Torgersen\n      39.10\n      18.70\n      181.00\n      3750.00\n      Male\n    \n    \n      1\n      Adelie\n      Torgersen\n      39.50\n      17.40\n      186.00\n      3800.00\n      Female\n    \n    \n      2\n      Adelie\n      Torgersen\n      40.30\n      18.00\n      195.00\n      3250.00\n      Female\n    \n    \n      3\n      Adelie\n      Torgersen\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      Adelie\n      Torgersen\n      36.70\n      19.30\n      193.00\n      3450.00\n      Female\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      339\n      Gentoo\n      Biscoe\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      340\n      Gentoo\n      Biscoe\n      46.80\n      14.30\n      215.00\n      4850.00\n      Female\n    \n    \n      341\n      Gentoo\n      Biscoe\n      50.40\n      15.70\n      222.00\n      5750.00\n      Male\n    \n    \n      342\n      Gentoo\n      Biscoe\n      45.20\n      14.80\n      212.00\n      5200.00\n      Female\n    \n    \n      343\n      Gentoo\n      Biscoe\n      49.90\n      16.10\n      213.00\n      5400.00\n      Male\n    \n  \n\n344 rows × 7 columns\n\n\n\n\npenguins.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\n\npenguins.describe(include=\"object\")\n\n\n\n\n\n\n\n  \n    \n      \n      species\n      island\n      sex\n    \n  \n  \n    \n      count\n      344\n      344\n      333\n    \n    \n      unique\n      3\n      3\n      2\n    \n    \n      top\n      Adelie\n      Biscoe\n      Male\n    \n    \n      freq\n      152\n      168\n      168\n    \n  \n\n\n\n\n\n\n\npenguins[[\"island\", \"species\"]].value_counts()\n\nisland     species  \nBiscoe     Gentoo       124\nDream      Chinstrap     68\n           Adelie        56\nTorgersen  Adelie        52\nBiscoe     Adelie        44\ndtype: int64\n\n\n\ns1 = tips[\"total_bill\"]\ns2 = tips[\"tip\"]\n\npd.DataFrame([s1, s2]).T.head()\n\n\n\n\n\n  \n    \n      \n      total_bill\n      tip\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n    \n    \n      1\n      10.34\n      1.66\n    \n    \n      2\n      21.01\n      3.50\n    \n    \n      3\n      23.68\n      3.31\n    \n    \n      4\n      24.59\n      3.61\n    \n  \n\n\n\n\n\n\npandas Index\n\nframe1 = pd.DataFrame(np.arange(6).reshape((2, 3)),\n                     index=pd.Index([\"Ohio\", \"Colorado\"], name=\"state\"),\n                     columns=pd.Index([\"one\", \"two\", \"three\"], name=\"number\"))\nframe1\n\n\n\n\n\n\n\n  \n    \n      number\n      one\n      two\n      three\n    \n    \n      state\n      \n      \n      \n    \n  \n  \n    \n      Ohio\n      0\n      1\n      2\n    \n    \n      Colorado\n      3\n      4\n      5\n    \n  \n\n\n\n\n\n\n\nframe1.stack()\n\nstate     number\nOhio      one       0\n          two       1\n          three     2\nColorado  one       3\n          two       4\n          three     5\ndtype: int64\n\n\n\nframe2 = pd.DataFrame(np.arange(12).reshape((4, 3)),\n            index=pd.MultiIndex.from_arrays([[\"a\", \"a\", \"b\", \"b\"], [1, 2, 1, 2]], names=[\"idx1\", \"idx2\"]),\n            columns=pd.MultiIndex.from_arrays([[\"Ohio\", \"Ohio\", \"Colorado\"], [\"Green\", \"Red\", \"Green\"]], names=[\"state\", \"color\"]))\nframe2\n\n\n\n\n\n\n\n  \n    \n      \n      state\n      Ohio\n      Colorado\n    \n    \n      \n      color\n      Green\n      Red\n      Green\n    \n    \n      idx1\n      idx2\n      \n      \n      \n    \n  \n  \n    \n      a\n      1\n      0\n      1\n      2\n    \n    \n      2\n      3\n      4\n      5\n    \n    \n      b\n      1\n      6\n      7\n      8\n    \n    \n      2\n      9\n      10\n      11\n    \n  \n\n\n\n\n\n\nTime Series에 특화\n\nfb = pd.read_csv('data/fb_stock_prices_2018.csv', index_col='date', parse_dates=True)\nfb.plot(kind='line', y=['high', 'low'], figsize=(7, 4), title='Facebook Stock 2018')\nplt.show()\n\n\n\n\n\nfb.head()\n\n\n\n\n\n  \n    \n      \n      open\n      high\n      low\n      close\n      volume\n    \n    \n      date\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2018-01-02\n      177.68\n      181.58\n      177.55\n      181.42\n      18151903\n    \n    \n      2018-01-03\n      181.88\n      184.78\n      181.33\n      184.67\n      16886563\n    \n    \n      2018-01-04\n      184.90\n      186.21\n      184.10\n      184.33\n      13880896\n    \n    \n      2018-01-05\n      185.59\n      186.90\n      184.93\n      186.85\n      13574535\n    \n    \n      2018-01-08\n      187.20\n      188.90\n      186.33\n      188.28\n      17994726\n    \n  \n\n\n\n\nindex없이 분석 가능?\nindex의 활용은 강의 후반부에…"
  },
  {
    "objectID": "contents/pandas.html#copy-vs.-view",
    "href": "contents/pandas.html#copy-vs.-view",
    "title": "NumPy and pandas",
    "section": "Copy vs. View",
    "text": "Copy vs. View"
  },
  {
    "objectID": "contents/others.html",
    "href": "contents/others.html",
    "title": "class2301",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn.objects as so\nimport plotly.express as px\n\n# statistics\nimport statsmodels.api as sm\n\n\nwdi_data = (\n    \"https://raw.githubusercontent.com/nickeubank/\"\n    \"practicaldatascience/master/Example_Data/wdi_plotting.csv\"\n)\nworld = pd.read_csv(wdi_data)\n\nnames = world.columns[3:].to_list()\n\nnames.append(\"GDP per capita (constant 2015 US$)\")\n\ncountries = world[\"Country Code\"].unique()\n\n\nwdi = pd.read_parquet(\"data/wdi.parquet\")\nwdi2 = wdi[wdi[\"Indicator Name\"].isin(names) & wdi[\"Country Code\"].isin(countries)].copy()\n\nindic_name = wdi2[\"Indicator Name\"].unique()\n\nwdi2.columns = wdi2.columns.str.replace(\" \", \"_\")\nwdi2.rename(str.lower, axis=1, inplace=True)\n\ndic = dict(zip(indic_name, [\"CO2\", \"GDP\", \"life_exp\", \"literacy\", \"mortality\", \"child_mortality\", \"polution\", \"pop\"]))\nwdi2 = wdi2.replace({\"indicator_name\": dic})\n\nyears = wdi2.loc[:, '1960':'2021'].columns\n\nwdi2_long1 = wdi2.melt(\n    id_vars=wdi2.columns[:4], \n    value_vars=years, \n    value_name=\"values\",\n    var_name=\"year\"\n)\n\nwdi2_long1 = wdi2_long1.drop(columns=\"indicator_code\")\n\nwdi2_long2 = wdi2_long1.pivot(\n    index=[\"country_name\",  \"country_code\", \"year\"], columns=\"indicator_name\", \n    values=\"values\"\n)\n\nwdi2_long2.columns.name = \"\"\nwdi2_long2 = wdi2_long2.reset_index()\nwdi2_long2[\"year\"] = wdi2_long2.year.astype(int)\n\n\n\nindicators = wdi[\"Indicator Name\"].unique()\nindicators = pd.Series(indicators)\n\nindicators[indicators.str.contains(\"region\")]\n\n751    Merchandise exports to low- and middle-income ...\n752    Merchandise exports to low- and middle-income ...\n764    Merchandise imports from low- and middle-incom...\n765    Merchandise imports from low- and middle-incom...\ndtype: object\n\n\n\nwdi_country = pd.read_csv(\"data/WDICountry.csv\")\n\nwdi2_long2 = wdi2_long2.merge(wdi_country[[\"Country Code\", \"Short Name\", \"Region\"]], left_on=\"country_code\", right_on=\"Country Code\", how=\"left\")\n\nwdi2_long2.drop(columns=[\"Country Code\"], inplace=True)\n\nwdi2_long2.rename(columns={\"Region\": \"region\", \"Short Name\": \"country\"}, inplace=True)\n\n\nwdi2_long2.region.value_counts(dropna=False)\n\nEurope & Central Asia         3596\nSub-Saharan Africa            2976\nLatin America & Caribbean     2604\nEast Asia & Pacific           2294\nMiddle East & North Africa    1302\nSouth Asia                     496\nNorth America                  186\nName: region, dtype: int64\n\n\n\nwdi_2020 = wdi2_long2.query('year == 2020')\n\nwdi_2020 = wdi_2020.assign(\n    log_gdp = lambda x: np.log(x.GDP),\n    log_child_mortality = lambda x: np.log(x.child_mortality),\n)\n\n\nbig_countries = wdi_2020.nlargest(10, \"pop\")[\"country\"]\nidx = wdi_2020[\"country\"].isin(big_countries)\nwdi_2020_big = wdi_2020[idx]\n\n\n(\n    so.Plot(wdi_2020, x=\"log_gdp\", y=\"child_mortality\")\n    .add(so.Dot(edgecolor=\"white\", alpha=.5), pointsize=\"pop\", color=\"region\")\n    .scale(pointsize=(6, 50), color=\"Set2\")\n    .layout(size=(8, 8))\n    .add(so.Text(halign=\"left\", offset=20), \n         x=wdi_2020_big.log_gdp, \n         y=wdi_2020_big.child_mortality, \n         text=wdi_2020_big.country)\n)\n\n\n\n\n\nwdi_2020_2 = wdi_2020.dropna(subset=[\"log_gdp\", \"log_child_mortality\", \"pop\"])\n\nimport plotly.express as px\nimport plotly.io as pio\n#pio.renderers.default = \"plotly_mimetype+notebook\"\n\nfig = px.scatter(wdi_2020_2, \n                 x=\"log_gdp\", y=\"child_mortality\", \n                 size=\"pop\", size_max=40,\n                 hover_name=\"country_name\")\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nwdi_2020.head()\n\n\n\n\n\n  \n    \n      \n      country_name\n      country_code\n      year\n      CO2\n      GDP\n      child_mortality\n      life_exp\n      literacy\n      mortality\n      polution\n      pop\n      country\n      region\n      log_gdp\n      log_child_mortality\n    \n  \n  \n    \n      60\n      Afghanistan\n      AFG\n      2020\n      NaN\n      553.036479\n      58.0\n      62.575\n      NaN\n      NaN\n      NaN\n      38972230.0\n      Afghanistan\n      South Asia\n      6.315424\n      4.060443\n    \n    \n      122\n      Albania\n      ALB\n      2020\n      NaN\n      4410.455165\n      9.8\n      76.989\n      NaN\n      NaN\n      NaN\n      2837849.0\n      Albania\n      Europe & Central Asia\n      8.391733\n      2.282382\n    \n    \n      184\n      Algeria\n      DZA\n      2020\n      NaN\n      3873.510015\n      22.7\n      74.453\n      NaN\n      NaN\n      NaN\n      43451666.0\n      Algeria\n      Middle East & North Africa\n      8.261916\n      3.122365\n    \n    \n      246\n      American Samoa\n      ASM\n      2020\n      NaN\n      14303.627033\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      46189.0\n      American Samoa\n      East Asia & Pacific\n      9.568268\n      NaN\n    \n    \n      308\n      Andorra\n      AND\n      2020\n      NaN\n      34394.277553\n      2.5\n      NaN\n      NaN\n      NaN\n      NaN\n      77700.0\n      Andorra\n      Europe & Central Asia\n      10.445645\n      0.916291"
  }
]